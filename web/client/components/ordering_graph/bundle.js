!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.webpackSigmaGraph=t():e.webpackSigmaGraph=t()}(self,(()=>(()=>{var e={796:e=>{e.exports=function(e,t){var r=t.length;if(0!==r){var n=e.length;e.length+=r;for(var i=0;i<r;i++)e[n+i]=t[i]}}},187:e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,n=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(r,n){function i(r){e.removeListener(t,o),n(r)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),r([].slice.call(arguments))}g(e,t,o,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&g(e,"error",t,{once:!0})}(e,i)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var a=10;function s(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function u(e,t,r,n){var i,o,a,u;if(s(r),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),a=o[t]),void 0===a)a=o[t]=r,++e._eventsCount;else if("function"==typeof a?a=o[t]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),(i=c(e))>0&&a.length>i&&!a.warned){a.warned=!0;var h=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");h.name="MaxListenersExceededWarning",h.emitter=e,h.type=t,h.count=a.length,u=h,console&&console.warn&&console.warn(u)}return e}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=h.bind(n);return i.listener=r,n.wrapFn=i,i}function l(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):f(i,i.length)}function p(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function f(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function g(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){n.once&&e.removeEventListener(t,i),r(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");a=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return c(this)},o.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var i="error"===e,o=this._events;if(void 0!==o)i=i&&void 0===o.error;else if(!i)return!1;if(i){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var c=o[e];if(void 0===c)return!1;if("function"==typeof c)n(c,this,t);else{var u=c.length,h=f(c,u);for(r=0;r<u;++r)n(h[r],this,t)}return!0},o.prototype.addListener=function(e,t){return u(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return u(this,e,t,!0)},o.prototype.once=function(e,t){return s(t),this.on(e,d(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return s(t),this.prependListener(e,d(this,e,t)),this},o.prototype.removeListener=function(e,t){var r,n,i,o,a;if(s(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){a=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,a||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},o.prototype.listeners=function(e){return l(this,e,!0)},o.prototype.rawListeners=function(e){return l(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},186:e=>{e.exports=function(e){return null!==e&&"object"==typeof e&&"function"==typeof e.addUndirectedEdgeWithKey&&"function"==typeof e.dropNode&&"boolean"==typeof e.multi}},698:function(e){e.exports=function(){"use strict";function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}function t(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,n(e,t)}function r(e){return r=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},r(e)}function n(e,t){return n=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},n(e,t)}function i(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t,r){return o=i()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var o=new(Function.bind.apply(e,i));return r&&n(o,r.prototype),o},o.apply(null,arguments)}function a(e){var t="function"==typeof Map?new Map:void 0;return a=function(e){if(null===e||(i=e,-1===Function.toString.call(i).indexOf("[native code]")))return e;var i;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return o(e,arguments,r(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),n(a,e)},a(e)}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var c=function(){for(var e=arguments[0],t=1,r=arguments.length;t<r;t++)if(arguments[t])for(var n in arguments[t])e[n]=arguments[t][n];return e};function u(e,t,r,n){var i=e._nodes.get(t),o=null;return i?o="mixed"===n?i.out&&i.out[r]||i.undirected&&i.undirected[r]:"directed"===n?i.out&&i.out[r]:i.undirected&&i.undirected[r]:o}function h(t){return"object"===e(t)&&null!==t&&t.constructor===Object}function d(e){var t;for(t in e)return!1;return!0}function l(e,t,r){Object.defineProperty(e,t,{enumerable:!1,configurable:!1,writable:!0,value:r})}function p(e,t,r){var n={enumerable:!0,configurable:!0};"function"==typeof r?n.get=r:(n.value=r,n.writable=!1),Object.defineProperty(e,t,n)}function f(e){return!(!h(e)||e.attributes&&!Array.isArray(e.attributes))}"function"==typeof Object.assign&&(c=Object.assign);var g,y={exports:{}},v="object"==typeof Reflect?Reflect:null,m=v&&"function"==typeof v.apply?v.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};g=v&&"function"==typeof v.ownKeys?v.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var b=Number.isNaN||function(e){return e!=e};function w(){w.init.call(this)}y.exports=w,y.exports.once=function(e,t){return new Promise((function(r,n){function i(r){e.removeListener(t,o),n(r)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),r([].slice.call(arguments))}F(e,t,o,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&F(e,"error",t,{once:!0})}(e,i)}))},w.EventEmitter=w,w.prototype._events=void 0,w.prototype._eventsCount=0,w.prototype._maxListeners=void 0;var _=10;function x(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function E(e){return void 0===e._maxListeners?w.defaultMaxListeners:e._maxListeners}function L(e,t,r,n){var i,o,a,s;if(x(r),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),a=o[t]),void 0===a)a=o[t]=r,++e._eventsCount;else if("function"==typeof a?a=o[t]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),(i=E(e))>0&&a.length>i&&!a.warned){a.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=a.length,s=c,console&&console.warn&&console.warn(s)}return e}function A(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function S(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=A.bind(n);return i.listener=r,n.wrapFn=i,i}function C(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):G(i,i.length)}function k(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function G(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function F(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){n.once&&e.removeEventListener(t,i),r(o)}))}}function D(e){if("function"!=typeof e)throw new Error("obliterator/iterator: expecting a function!");this.next=e}Object.defineProperty(w,"defaultMaxListeners",{enumerable:!0,get:function(){return _},set:function(e){if("number"!=typeof e||e<0||b(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");_=e}}),w.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},w.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||b(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},w.prototype.getMaxListeners=function(){return E(this)},w.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var s=i[e];if(void 0===s)return!1;if("function"==typeof s)m(s,this,t);else{var c=s.length,u=G(s,c);for(r=0;r<c;++r)m(u[r],this,t)}return!0},w.prototype.addListener=function(e,t){return L(this,e,t,!1)},w.prototype.on=w.prototype.addListener,w.prototype.prependListener=function(e,t){return L(this,e,t,!0)},w.prototype.once=function(e,t){return x(t),this.on(e,S(this,e,t)),this},w.prototype.prependOnceListener=function(e,t){return x(t),this.prependListener(e,S(this,e,t)),this},w.prototype.removeListener=function(e,t){var r,n,i,o,a;if(x(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){a=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,a||t)}return this},w.prototype.off=w.prototype.removeListener,w.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},w.prototype.listeners=function(e){return C(this,e,!0)},w.prototype.rawListeners=function(e){return C(this,e,!1)},w.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):k.call(e,t)},w.prototype.listenerCount=k,w.prototype.eventNames=function(){return this._eventsCount>0?g(this._events):[]},"undefined"!=typeof Symbol&&(D.prototype[Symbol.iterator]=function(){return this}),D.of=function(){var e=arguments,t=e.length,r=0;return new D((function(){return r>=t?{done:!0}:{done:!1,value:e[r++]}}))},D.empty=function(){return new D((function(){return{done:!0}}))},D.fromSequence=function(e){var t=0,r=e.length;return new D((function(){return t>=r?{done:!0}:{done:!1,value:e[t++]}}))},D.is=function(e){return e instanceof D||"object"==typeof e&&null!==e&&"function"==typeof e.next};var P=D,T={};T.ARRAY_BUFFER_SUPPORT="undefined"!=typeof ArrayBuffer,T.SYMBOL_SUPPORT="undefined"!=typeof Symbol;var O=P,M=T,R=M.ARRAY_BUFFER_SUPPORT,N=M.SYMBOL_SUPPORT,j=function(e){var t=function(e){return"string"==typeof e||Array.isArray(e)||R&&ArrayBuffer.isView(e)?O.fromSequence(e):"object"!=typeof e||null===e?null:N&&"function"==typeof e[Symbol.iterator]?e[Symbol.iterator]():"function"==typeof e.next?e:null}(e);if(!t)throw new Error("obliterator: target is not iterable nor a valid iterator.");return t},U=j,z=function(e,t){for(var r,n=arguments.length>1?t:1/0,i=n!==1/0?new Array(n):[],o=0,a=U(e);;){if(o===n)return i;if((r=a.next()).done)return o!==t&&(i.length=o),i;i[o++]=r.value}},B=function(e){function r(t){var r;return(r=e.call(this)||this).name="GraphError",r.message=t,r}return t(r,e),r}(a(Error)),I=function(e){function r(t){var n;return(n=e.call(this,t)||this).name="InvalidArgumentsGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(s(n),r.prototype.constructor),n}return t(r,e),r}(B),W=function(e){function r(t){var n;return(n=e.call(this,t)||this).name="NotFoundGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(s(n),r.prototype.constructor),n}return t(r,e),r}(B),q=function(e){function r(t){var n;return(n=e.call(this,t)||this).name="UsageGraphError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(s(n),r.prototype.constructor),n}return t(r,e),r}(B);function H(e,t){this.key=e,this.attributes=t,this.clear()}function Y(e,t){this.key=e,this.attributes=t,this.clear()}function V(e,t){this.key=e,this.attributes=t,this.clear()}function K(e,t,r,n,i){this.key=t,this.attributes=i,this.undirected=e,this.source=r,this.target=n}function Z(e,t,r,n,i,o,a){var s,c,u,h;if(n=""+n,0===r){if(!(s=e._nodes.get(n)))throw new W("Graph.".concat(t,': could not find the "').concat(n,'" node in the graph.'));u=i,h=o}else if(3===r){if(i=""+i,!(c=e._edges.get(i)))throw new W("Graph.".concat(t,': could not find the "').concat(i,'" edge in the graph.'));var d=c.source.key,l=c.target.key;if(n===d)s=c.target;else{if(n!==l)throw new W("Graph.".concat(t,': the "').concat(n,'" node is not attached to the "').concat(i,'" edge (').concat(d,", ").concat(l,")."));s=c.source}u=o,h=a}else{if(!(c=e._edges.get(n)))throw new W("Graph.".concat(t,': could not find the "').concat(n,'" edge in the graph.'));s=1===r?c.source:c.target,u=i,h=o}return[s,u,h]}H.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.undirectedDegree=0,this.undirectedLoops=0,this.directedLoops=0,this.in={},this.out={},this.undirected={}},Y.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.directedLoops=0,this.in={},this.out={}},V.prototype.clear=function(){this.undirectedDegree=0,this.undirectedLoops=0,this.undirected={}},K.prototype.attach=function(){var e="out",t="in";this.undirected&&(e=t="undirected");var r=this.source.key,n=this.target.key;this.source[e][n]=this,this.undirected&&r===n||(this.target[t][r]=this)},K.prototype.attachMulti=function(){var e="out",t="in",r=this.source.key,n=this.target.key;this.undirected&&(e=t="undirected");var i=this.source[e],o=i[n];if(void 0===o)return i[n]=this,void(this.undirected&&r===n||(this.target[t][r]=this));o.previous=this,this.next=o,i[n]=this,this.target[t][r]=this},K.prototype.detach=function(){var e=this.source.key,t=this.target.key,r="out",n="in";this.undirected&&(r=n="undirected"),delete this.source[r][t],delete this.target[n][e]},K.prototype.detachMulti=function(){var e=this.source.key,t=this.target.key,r="out",n="in";this.undirected&&(r=n="undirected"),void 0===this.previous?void 0===this.next?(delete this.source[r][t],delete this.target[n][e]):(this.next.previous=void 0,this.source[r][t]=this.next,this.target[n][e]=this.next):(this.previous.next=this.next,void 0!==this.next&&(this.next.previous=this.previous))};var X=[{name:function(e){return"get".concat(e,"Attribute")},attacher:function(e,t,r){e.prototype[t]=function(e,n,i){var o=Z(this,t,r,e,n,i),a=o[0],s=o[1];return a.attributes[s]}}},{name:function(e){return"get".concat(e,"Attributes")},attacher:function(e,t,r){e.prototype[t]=function(e,n){return Z(this,t,r,e,n)[0].attributes}}},{name:function(e){return"has".concat(e,"Attribute")},attacher:function(e,t,r){e.prototype[t]=function(e,n,i){var o=Z(this,t,r,e,n,i),a=o[0],s=o[1];return a.attributes.hasOwnProperty(s)}}},{name:function(e){return"set".concat(e,"Attribute")},attacher:function(e,t,r){e.prototype[t]=function(e,n,i,o){var a=Z(this,t,r,e,n,i,o),s=a[0],c=a[1],u=a[2];return s.attributes[c]=u,this.emit("nodeAttributesUpdated",{key:s.key,type:"set",attributes:s.attributes,name:c}),this}}},{name:function(e){return"update".concat(e,"Attribute")},attacher:function(e,t,r){e.prototype[t]=function(e,n,i,o){var a=Z(this,t,r,e,n,i,o),s=a[0],c=a[1],u=a[2];if("function"!=typeof u)throw new I("Graph.".concat(t,": updater should be a function."));var h=s.attributes,d=u(h[c]);return h[c]=d,this.emit("nodeAttributesUpdated",{key:s.key,type:"set",attributes:s.attributes,name:c}),this}}},{name:function(e){return"remove".concat(e,"Attribute")},attacher:function(e,t,r){e.prototype[t]=function(e,n,i){var o=Z(this,t,r,e,n,i),a=o[0],s=o[1];return delete a.attributes[s],this.emit("nodeAttributesUpdated",{key:a.key,type:"remove",attributes:a.attributes,name:s}),this}}},{name:function(e){return"replace".concat(e,"Attributes")},attacher:function(e,t,r){e.prototype[t]=function(e,n,i){var o=Z(this,t,r,e,n,i),a=o[0],s=o[1];if(!h(s))throw new I("Graph.".concat(t,": provided attributes are not a plain object."));return a.attributes=s,this.emit("nodeAttributesUpdated",{key:a.key,type:"replace",attributes:a.attributes}),this}}},{name:function(e){return"merge".concat(e,"Attributes")},attacher:function(e,t,r){e.prototype[t]=function(e,n,i){var o=Z(this,t,r,e,n,i),a=o[0],s=o[1];if(!h(s))throw new I("Graph.".concat(t,": provided attributes are not a plain object."));return c(a.attributes,s),this.emit("nodeAttributesUpdated",{key:a.key,type:"merge",attributes:a.attributes,data:s}),this}}},{name:function(e){return"update".concat(e,"Attributes")},attacher:function(e,t,r){e.prototype[t]=function(e,n,i){var o=Z(this,t,r,e,n,i),a=o[0],s=o[1];if("function"!=typeof s)throw new I("Graph.".concat(t,": provided updater is not a function."));return a.attributes=s(a.attributes),this.emit("nodeAttributesUpdated",{key:a.key,type:"update",attributes:a.attributes}),this}}}],Q=[{name:function(e){return"get".concat(e,"Attribute")},attacher:function(e,t,r){e.prototype[t]=function(e,n){var i;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+e,a=""+n;if(n=arguments[2],!(i=u(this,o,a,r)))throw new W("Graph.".concat(t,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(i=this._edges.get(e)))throw new W("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}return i.attributes[n]}}},{name:function(e){return"get".concat(e,"Attributes")},attacher:function(e,t,r){e.prototype[t]=function(e){var n;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>1){if(this.multi)throw new q("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var i=""+e,o=""+arguments[1];if(!(n=u(this,i,o,r)))throw new W("Graph.".concat(t,': could not find an edge for the given path ("').concat(i,'" - "').concat(o,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(n=this._edges.get(e)))throw new W("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}return n.attributes}}},{name:function(e){return"has".concat(e,"Attribute")},attacher:function(e,t,r){e.prototype[t]=function(e,n){var i;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+e,a=""+n;if(n=arguments[2],!(i=u(this,o,a,r)))throw new W("Graph.".concat(t,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(i=this._edges.get(e)))throw new W("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}return i.attributes.hasOwnProperty(n)}}},{name:function(e){return"set".concat(e,"Attribute")},attacher:function(e,t,r){e.prototype[t]=function(e,n,i){var o;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>3){if(this.multi)throw new q("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var a=""+e,s=""+n;if(n=arguments[2],i=arguments[3],!(o=u(this,a,s,r)))throw new W("Graph.".concat(t,': could not find an edge for the given path ("').concat(a,'" - "').concat(s,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(o=this._edges.get(e)))throw new W("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}return o.attributes[n]=i,this.emit("edgeAttributesUpdated",{key:o.key,type:"set",attributes:o.attributes,name:n}),this}}},{name:function(e){return"update".concat(e,"Attribute")},attacher:function(e,t,r){e.prototype[t]=function(e,n,i){var o;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>3){if(this.multi)throw new q("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var a=""+e,s=""+n;if(n=arguments[2],i=arguments[3],!(o=u(this,a,s,r)))throw new W("Graph.".concat(t,': could not find an edge for the given path ("').concat(a,'" - "').concat(s,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(o=this._edges.get(e)))throw new W("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}if("function"!=typeof i)throw new I("Graph.".concat(t,": updater should be a function."));return o.attributes[n]=i(o.attributes[n]),this.emit("edgeAttributesUpdated",{key:o.key,type:"set",attributes:o.attributes,name:n}),this}}},{name:function(e){return"remove".concat(e,"Attribute")},attacher:function(e,t,r){e.prototype[t]=function(e,n){var i;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+e,a=""+n;if(n=arguments[2],!(i=u(this,o,a,r)))throw new W("Graph.".concat(t,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(i=this._edges.get(e)))throw new W("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}return delete i.attributes[n],this.emit("edgeAttributesUpdated",{key:i.key,type:"remove",attributes:i.attributes,name:n}),this}}},{name:function(e){return"replace".concat(e,"Attributes")},attacher:function(e,t,r){e.prototype[t]=function(e,n){var i;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+e,a=""+n;if(n=arguments[2],!(i=u(this,o,a,r)))throw new W("Graph.".concat(t,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(i=this._edges.get(e)))throw new W("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}if(!h(n))throw new I("Graph.".concat(t,": provided attributes are not a plain object."));return i.attributes=n,this.emit("edgeAttributesUpdated",{key:i.key,type:"replace",attributes:i.attributes}),this}}},{name:function(e){return"merge".concat(e,"Attributes")},attacher:function(e,t,r){e.prototype[t]=function(e,n){var i;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+e,a=""+n;if(n=arguments[2],!(i=u(this,o,a,r)))throw new W("Graph.".concat(t,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(i=this._edges.get(e)))throw new W("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}if(!h(n))throw new I("Graph.".concat(t,": provided attributes are not a plain object."));return c(i.attributes,n),this.emit("edgeAttributesUpdated",{key:i.key,type:"merge",attributes:i.attributes,data:n}),this}}},{name:function(e){return"update".concat(e,"Attributes")},attacher:function(e,t,r){e.prototype[t]=function(e,n){var i;if("mixed"!==this.type&&"mixed"!==r&&r!==this.type)throw new q("Graph.".concat(t,": cannot find this type of edges in your ").concat(this.type," graph."));if(arguments.length>2){if(this.multi)throw new q("Graph.".concat(t,": cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about."));var o=""+e,a=""+n;if(n=arguments[2],!(i=u(this,o,a,r)))throw new W("Graph.".concat(t,': could not find an edge for the given path ("').concat(o,'" - "').concat(a,'").'))}else{if("mixed"!==r)throw new q("Graph.".concat(t,": calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type."));if(e=""+e,!(i=this._edges.get(e)))throw new W("Graph.".concat(t,': could not find the "').concat(e,'" edge in the graph.'))}if("function"!=typeof n)throw new I("Graph.".concat(t,": provided updater is not a function."));return i.attributes=n(i.attributes),this.emit("edgeAttributesUpdated",{key:i.key,type:"update",attributes:i.attributes}),this}}}],J=P,$=j,ee=function(){var e=arguments,t=null,r=-1;return new J((function(){for(var n=null;;){if(null===t){if(++r>=e.length)return{done:!0};t=$(e[r])}if(!0!==(n=t.next()).done)break;t=null}return n}))},te=[{name:"edges",type:"mixed"},{name:"inEdges",type:"directed",direction:"in"},{name:"outEdges",type:"directed",direction:"out"},{name:"inboundEdges",type:"mixed",direction:"in"},{name:"outboundEdges",type:"mixed",direction:"out"},{name:"directedEdges",type:"directed"},{name:"undirectedEdges",type:"undirected"}];function re(e,t,r,n){var i=!1;for(var o in t)if(o!==n){var a=t[o];if(i=r(a.key,a.attributes,a.source.key,a.target.key,a.source.attributes,a.target.attributes,a.undirected),e&&i)return a.key}}function ne(e,t,r,n){var i,o,a,s=!1;for(var c in t)if(c!==n){i=t[c];do{if(o=i.source,a=i.target,s=r(i.key,i.attributes,o.key,a.key,o.attributes,a.attributes,i.undirected),e&&s)return i.key;i=i.next}while(void 0!==i)}}function ie(e,t){var r,n=Object.keys(e),i=n.length,o=0;return new P((function(){do{if(r)r=r.next;else{if(o>=i)return{done:!0};var a=n[o++];if(a===t){r=void 0;continue}r=e[a]}}while(!r);return{done:!1,value:{edge:r.key,attributes:r.attributes,source:r.source.key,target:r.target.key,sourceAttributes:r.source.attributes,targetAttributes:r.target.attributes,undirected:r.undirected}}}))}function oe(e,t,r,n){var i=t[r];if(i){var o=i.source,a=i.target;return n(i.key,i.attributes,o.key,a.key,o.attributes,a.attributes,i.undirected)&&e?i.key:void 0}}function ae(e,t,r,n){var i=t[r];if(i){var o=!1;do{if(o=n(i.key,i.attributes,i.source.key,i.target.key,i.source.attributes,i.target.attributes,i.undirected),e&&o)return i.key;i=i.next}while(void 0!==i)}}function se(e,t){var r=e[t];return void 0!==r.next?new P((function(){if(!r)return{done:!0};var e={edge:r.key,attributes:r.attributes,source:r.source.key,target:r.target.key,sourceAttributes:r.source.attributes,targetAttributes:r.target.attributes,undirected:r.undirected};return r=r.next,{done:!1,value:e}})):P.of({edge:r.key,attributes:r.attributes,source:r.source.key,target:r.target.key,sourceAttributes:r.source.attributes,targetAttributes:r.target.attributes,undirected:r.undirected})}function ce(e,t){if(0===e.size)return[];if("mixed"===t||t===e.type)return"function"==typeof Array.from?Array.from(e._edges.keys()):z(e._edges.keys(),e._edges.size);for(var r,n,i="undirected"===t?e.undirectedSize:e.directedSize,o=new Array(i),a="undirected"===t,s=e._edges.values(),c=0;!0!==(r=s.next()).done;)(n=r.value).undirected===a&&(o[c++]=n.key);return o}function ue(e,t,r,n){if(0!==t.size)for(var i,o,a="mixed"!==r&&r!==t.type,s="undirected"===r,c=!1,u=t._edges.values();!0!==(i=u.next()).done;)if(o=i.value,!a||o.undirected===s){var h=o,d=h.key,l=h.attributes,p=h.source,f=h.target;if(c=n(d,l,p.key,f.key,p.attributes,f.attributes,o.undirected),e&&c)return d}}function he(e,t){if(0===e.size)return P.empty();var r="mixed"!==t&&t!==e.type,n="undirected"===t,i=e._edges.values();return new P((function(){for(var e,t;;){if((e=i.next()).done)return e;if(t=e.value,!r||t.undirected===n)break}return{value:{edge:t.key,attributes:t.attributes,source:t.source.key,target:t.target.key,sourceAttributes:t.source.attributes,targetAttributes:t.target.attributes,undirected:t.undirected},done:!1}}))}function de(e,t,r,n,i,o){var a,s=t?ne:re;if("undirected"!==r){if("out"!==n&&(a=s(e,i.in,o),e&&a))return a;if("in"!==n&&(a=s(e,i.out,o,n?void 0:i.key),e&&a))return a}if("directed"!==r&&(a=s(e,i.undirected,o),e&&a))return a}function le(e,t,r,n){var i=[];return de(!1,e,t,r,n,(function(e){i.push(e)})),i}function pe(e,t,r){var n=P.empty();return"undirected"!==e&&("out"!==t&&void 0!==r.in&&(n=ee(n,ie(r.in))),"in"!==t&&void 0!==r.out&&(n=ee(n,ie(r.out,t?void 0:r.key)))),"directed"!==e&&void 0!==r.undirected&&(n=ee(n,ie(r.undirected))),n}function fe(e,t,r,n,i,o,a){var s,c=r?ae:oe;if("undirected"!==t){if(void 0!==i.in&&"out"!==n&&(s=c(e,i.in,o,a),e&&s))return s;if(void 0!==i.out&&"in"!==n&&(n||i.key!==o)&&(s=c(e,i.out,o,a),e&&s))return s}if("directed"!==t&&void 0!==i.undirected&&(s=c(e,i.undirected,o,a),e&&s))return s}function ge(e,t,r,n,i){var o=[];return fe(!1,e,t,r,n,i,(function(e){o.push(e)})),o}function ye(e,t,r,n){var i=P.empty();return"undirected"!==e&&(void 0!==r.in&&"out"!==t&&n in r.in&&(i=ee(i,se(r.in,n))),void 0!==r.out&&"in"!==t&&n in r.out&&(t||r.key!==n)&&(i=ee(i,se(r.out,n)))),"directed"!==e&&void 0!==r.undirected&&n in r.undirected&&(i=ee(i,se(r.undirected,n))),i}var ve=[{name:"neighbors",type:"mixed"},{name:"inNeighbors",type:"directed",direction:"in"},{name:"outNeighbors",type:"directed",direction:"out"},{name:"inboundNeighbors",type:"mixed",direction:"in"},{name:"outboundNeighbors",type:"mixed",direction:"out"},{name:"directedNeighbors",type:"directed"},{name:"undirectedNeighbors",type:"undirected"}];function me(){this.A=null,this.B=null}function be(e,t,r,n,i){for(var o in n){var a=n[o],s=a.source,c=a.target,u=s===r?c:s;if(!t||!t.has(u.key)){var h=i(u.key,u.attributes);if(e&&h)return u.key}}}function we(e,t,r,n,i){if("mixed"!==t){if("undirected"===t)return be(e,null,n,n.undirected,i);if("string"==typeof r)return be(e,null,n,n[r],i)}var o,a=new me;if("undirected"!==t){if("out"!==r){if(o=be(e,null,n,n.in,i),e&&o)return o;a.wrap(n.in)}if("in"!==r){if(o=be(e,a,n,n.out,i),e&&o)return o;a.wrap(n.out)}}if("directed"!==t&&(o=be(e,a,n,n.undirected,i),e&&o))return o}function _e(e,t,r){var n=Object.keys(r),i=n.length,o=0;return new P((function(){var a=null;do{if(o>=i)return e&&e.wrap(r),{done:!0};var s=r[n[o++]],c=s.source,u=s.target;a=c===t?u:c,e&&e.has(a.key)&&(a=null)}while(null===a);return{done:!1,value:{neighbor:a.key,attributes:a.attributes}}}))}function xe(e,t,r,n,i){for(var o,a,s,c,u,h,d,l=n._nodes.values(),p=n.type;!0!==(o=l.next()).done;){var f=!1;if(a=o.value,"undirected"!==p)for(s in c=a.out){u=c[s];do{if(h=u.target,f=!0,d=i(a.key,h.key,a.attributes,h.attributes,u.key,u.attributes,u.undirected),e&&d)return u;u=u.next}while(u)}if("directed"!==p)for(s in c=a.undirected)if(!(t&&a.key>s)){u=c[s];do{if((h=u.target).key!==s&&(h=u.source),f=!0,d=i(a.key,h.key,a.attributes,h.attributes,u.key,u.attributes,u.undirected),e&&d)return u;u=u.next}while(u)}if(r&&!f&&(d=i(a.key,null,a.attributes,null,null,null,null),e&&d))return null}}function Ee(e){if(!h(e))throw new I('Graph.import: invalid serialized node. A serialized node should be a plain object with at least a "key" property.');if(!("key"in e))throw new I("Graph.import: serialized node is missing its key.");if("attributes"in e&&(!h(e.attributes)||null===e.attributes))throw new I("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.")}function Le(e){if(!h(e))throw new I('Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a "source" & "target" property.');if(!("source"in e))throw new I("Graph.import: serialized edge is missing its source.");if(!("target"in e))throw new I("Graph.import: serialized edge is missing its target.");if("attributes"in e&&(!h(e.attributes)||null===e.attributes))throw new I("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.");if("undirected"in e&&"boolean"!=typeof e.undirected)throw new I("Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.")}me.prototype.wrap=function(e){null===this.A?this.A=e:null===this.B&&(this.B=e)},me.prototype.has=function(e){return null!==this.A&&e in this.A||null!==this.B&&e in this.B};var Ae,Se=(Ae=255&Math.floor(256*Math.random()),function(){return Ae++}),Ce=new Set(["directed","undirected","mixed"]),ke=new Set(["domain","_events","_eventsCount","_maxListeners"]),Ge={allowSelfLoops:!0,multi:!1,type:"mixed"};function Fe(e,t,r){var n=new e.NodeDataClass(t,r);return e._nodes.set(t,n),e.emit("nodeAdded",{key:t,attributes:r}),n}function De(e,t,r,n,i,o,a,s){if(!n&&"undirected"===e.type)throw new q("Graph.".concat(t,": you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead."));if(n&&"directed"===e.type)throw new q("Graph.".concat(t,": you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead."));if(s&&!h(s))throw new I("Graph.".concat(t,': invalid attributes. Expecting an object but got "').concat(s,'"'));if(o=""+o,a=""+a,s=s||{},!e.allowSelfLoops&&o===a)throw new q("Graph.".concat(t,': source & target are the same ("').concat(o,"\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false."));var c=e._nodes.get(o),u=e._nodes.get(a);if(!c)throw new W("Graph.".concat(t,': source node "').concat(o,'" not found.'));if(!u)throw new W("Graph.".concat(t,': target node "').concat(a,'" not found.'));var d={key:null,undirected:n,source:o,target:a,attributes:s};if(r)i=e._edgeKeyGenerator();else if(i=""+i,e._edges.has(i))throw new q("Graph.".concat(t,': the "').concat(i,'" edge already exists in the graph.'));if(!e.multi&&(n?void 0!==c.undirected[a]:void 0!==c.out[a]))throw new q("Graph.".concat(t,': an edge linking "').concat(o,'" to "').concat(a,"\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option."));var l=new K(n,i,c,u,s);e._edges.set(i,l);var p=o===a;return n?(c.undirectedDegree++,u.undirectedDegree++,p&&(c.undirectedLoops++,e._undirectedSelfLoopCount++)):(c.outDegree++,u.inDegree++,p&&(c.directedLoops++,e._directedSelfLoopCount++)),e.multi?l.attachMulti():l.attach(),n?e._undirectedSize++:e._directedSize++,d.key=i,e.emit("edgeAdded",d),i}function Pe(e,t,r,n,i,o,a,s,u){if(!n&&"undirected"===e.type)throw new q("Graph.".concat(t,": you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead."));if(n&&"directed"===e.type)throw new q("Graph.".concat(t,": you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead."));if(s)if(u){if("function"!=typeof s)throw new I("Graph.".concat(t,': invalid updater function. Expecting a function but got "').concat(s,'"'))}else if(!h(s))throw new I("Graph.".concat(t,': invalid attributes. Expecting an object but got "').concat(s,'"'));var d;if(o=""+o,a=""+a,u&&(d=s,s=void 0),!e.allowSelfLoops&&o===a)throw new q("Graph.".concat(t,': source & target are the same ("').concat(o,"\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false."));var l,p,f=e._nodes.get(o),g=e._nodes.get(a);if(!r&&(l=e._edges.get(i))){if(!(l.source.key===o&&l.target.key===a||n&&l.source.key===a&&l.target.key===o))throw new q("Graph.".concat(t,': inconsistency detected when attempting to merge the "').concat(i,'" edge with "').concat(o,'" source & "').concat(a,'" target vs. ("').concat(l.source.key,'", "').concat(l.target.key,'").'));p=l}if(p||e.multi||!f||(p=n?f.undirected[a]:f.out[a]),p){var y=[p.key,!1,!1,!1];if(u?!d:!s)return y;if(u){var v=p.attributes;p.attributes=d(v),e.emit("edgeAttributesUpdated",{type:"replace",key:p.key,attributes:p.attributes})}else c(p.attributes,s),e.emit("edgeAttributesUpdated",{type:"merge",key:p.key,attributes:p.attributes,data:s});return y}s=s||{},u&&d&&(s=d(s));var m={key:null,undirected:n,source:o,target:a,attributes:s};if(r)i=e._edgeKeyGenerator();else if(i=""+i,e._edges.has(i))throw new q("Graph.".concat(t,': the "').concat(i,'" edge already exists in the graph.'));var b=!1,w=!1;f||(f=Fe(e,o,{}),b=!0,o===a&&(g=f,w=!0)),g||(g=Fe(e,a,{}),w=!0),l=new K(n,i,f,g,s),e._edges.set(i,l);var _=o===a;return n?(f.undirectedDegree++,g.undirectedDegree++,_&&(f.undirectedLoops++,e._undirectedSelfLoopCount++)):(f.outDegree++,g.inDegree++,_&&(f.directedLoops++,e._directedSelfLoopCount++)),e.multi?l.attachMulti():l.attach(),n?e._undirectedSize++:e._directedSize++,m.key=i,e.emit("edgeAdded",m),[i,!0,b,w]}function Te(e,t){e._edges.delete(t.key);var r=t.source,n=t.target,i=t.attributes,o=t.undirected,a=r===n;o?(r.undirectedDegree--,n.undirectedDegree--,a&&(r.undirectedLoops--,e._undirectedSelfLoopCount--)):(r.outDegree--,n.inDegree--,a&&(r.directedLoops--,e._directedSelfLoopCount--)),e.multi?t.detachMulti():t.detach(),o?e._undirectedSize--:e._directedSize--,e.emit("edgeDropped",{key:t.key,attributes:i,source:r.key,target:n.key,undirected:o})}var Oe=function(r){function n(e){var t;if(t=r.call(this)||this,"boolean"!=typeof(e=c({},Ge,e)).multi)throw new I("Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"".concat(e.multi,'".'));if(!Ce.has(e.type))throw new I('Graph.constructor: invalid \'type\' option. Should be one of "mixed", "directed" or "undirected" but got "'.concat(e.type,'".'));if("boolean"!=typeof e.allowSelfLoops)throw new I("Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"".concat(e.allowSelfLoops,'".'));var n="mixed"===e.type?H:"directed"===e.type?Y:V;l(s(t),"NodeDataClass",n);var i="geid_"+Se()+"_",o=0;return l(s(t),"_attributes",{}),l(s(t),"_nodes",new Map),l(s(t),"_edges",new Map),l(s(t),"_directedSize",0),l(s(t),"_undirectedSize",0),l(s(t),"_directedSelfLoopCount",0),l(s(t),"_undirectedSelfLoopCount",0),l(s(t),"_edgeKeyGenerator",(function(){var e;do{e=i+o++}while(t._edges.has(e));return e})),l(s(t),"_options",e),ke.forEach((function(e){return l(s(t),e,t[e])})),p(s(t),"order",(function(){return t._nodes.size})),p(s(t),"size",(function(){return t._edges.size})),p(s(t),"directedSize",(function(){return t._directedSize})),p(s(t),"undirectedSize",(function(){return t._undirectedSize})),p(s(t),"selfLoopCount",(function(){return t._directedSelfLoopCount+t._undirectedSelfLoopCount})),p(s(t),"directedSelfLoopCount",(function(){return t._directedSelfLoopCount})),p(s(t),"undirectedSelfLoopCount",(function(){return t._undirectedSelfLoopCount})),p(s(t),"multi",t._options.multi),p(s(t),"type",t._options.type),p(s(t),"allowSelfLoops",t._options.allowSelfLoops),p(s(t),"implementation",(function(){return"graphology"})),t}t(n,r);var i=n.prototype;return i._resetInstanceCounters=function(){this._directedSize=0,this._undirectedSize=0,this._directedSelfLoopCount=0,this._undirectedSelfLoopCount=0},i.hasNode=function(e){return this._nodes.has(""+e)},i.hasDirectedEdge=function(e,t){if("undirected"===this.type)return!1;if(1===arguments.length){var r=""+e,n=this._edges.get(r);return!!n&&!n.undirected}if(2===arguments.length){e=""+e,t=""+t;var i=this._nodes.get(e);return!!i&&i.out.hasOwnProperty(t)}throw new I("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},i.hasUndirectedEdge=function(e,t){if("directed"===this.type)return!1;if(1===arguments.length){var r=""+e,n=this._edges.get(r);return!!n&&n.undirected}if(2===arguments.length){e=""+e,t=""+t;var i=this._nodes.get(e);return!!i&&i.undirected.hasOwnProperty(t)}throw new I("Graph.hasDirectedEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},i.hasEdge=function(e,t){if(1===arguments.length){var r=""+e;return this._edges.has(r)}if(2===arguments.length){e=""+e,t=""+t;var n=this._nodes.get(e);return!!n&&(void 0!==n.out&&n.out.hasOwnProperty(t)||void 0!==n.undirected&&n.undirected.hasOwnProperty(t))}throw new I("Graph.hasEdge: invalid arity (".concat(arguments.length,", instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target."))},i.directedEdge=function(e,t){if("undirected"!==this.type){if(e=""+e,t=""+t,this.multi)throw new q("Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.");var r=this._nodes.get(e);if(!r)throw new W('Graph.directedEdge: could not find the "'.concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new W('Graph.directedEdge: could not find the "'.concat(t,'" target node in the graph.'));var n=r.out&&r.out[t]||void 0;return n?n.key:void 0}},i.undirectedEdge=function(e,t){if("directed"!==this.type){if(e=""+e,t=""+t,this.multi)throw new q("Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.");var r=this._nodes.get(e);if(!r)throw new W('Graph.undirectedEdge: could not find the "'.concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new W('Graph.undirectedEdge: could not find the "'.concat(t,'" target node in the graph.'));var n=r.undirected&&r.undirected[t]||void 0;return n?n.key:void 0}},i.edge=function(e,t){if(this.multi)throw new q("Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.");e=""+e,t=""+t;var r=this._nodes.get(e);if(!r)throw new W('Graph.edge: could not find the "'.concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new W('Graph.edge: could not find the "'.concat(t,'" target node in the graph.'));var n=r.out&&r.out[t]||r.undirected&&r.undirected[t]||void 0;if(n)return n.key},i.areDirectedNeighbors=function(e,t){e=""+e,t=""+t;var r=this._nodes.get(e);if(!r)throw new W('Graph.areDirectedNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"undirected"!==this.type&&(t in r.in||t in r.out)},i.areOutNeighbors=function(e,t){e=""+e,t=""+t;var r=this._nodes.get(e);if(!r)throw new W('Graph.areOutNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"undirected"!==this.type&&t in r.out},i.areInNeighbors=function(e,t){e=""+e,t=""+t;var r=this._nodes.get(e);if(!r)throw new W('Graph.areInNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"undirected"!==this.type&&t in r.in},i.areUndirectedNeighbors=function(e,t){e=""+e,t=""+t;var r=this._nodes.get(e);if(!r)throw new W('Graph.areUndirectedNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"directed"!==this.type&&t in r.undirected},i.areNeighbors=function(e,t){e=""+e,t=""+t;var r=this._nodes.get(e);if(!r)throw new W('Graph.areNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"undirected"!==this.type&&(t in r.in||t in r.out)||"directed"!==this.type&&t in r.undirected},i.areInboundNeighbors=function(e,t){e=""+e,t=""+t;var r=this._nodes.get(e);if(!r)throw new W('Graph.areInboundNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"undirected"!==this.type&&t in r.in||"directed"!==this.type&&t in r.undirected},i.areOutboundNeighbors=function(e,t){e=""+e,t=""+t;var r=this._nodes.get(e);if(!r)throw new W('Graph.areOutboundNeighbors: could not find the "'.concat(e,'" node in the graph.'));return"undirected"!==this.type&&t in r.out||"directed"!==this.type&&t in r.undirected},i.inDegree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new W('Graph.inDegree: could not find the "'.concat(e,'" node in the graph.'));return"undirected"===this.type?0:t.inDegree},i.outDegree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new W('Graph.outDegree: could not find the "'.concat(e,'" node in the graph.'));return"undirected"===this.type?0:t.outDegree},i.directedDegree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new W('Graph.directedDegree: could not find the "'.concat(e,'" node in the graph.'));return"undirected"===this.type?0:t.inDegree+t.outDegree},i.undirectedDegree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new W('Graph.undirectedDegree: could not find the "'.concat(e,'" node in the graph.'));return"directed"===this.type?0:t.undirectedDegree},i.inboundDegree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new W('Graph.inboundDegree: could not find the "'.concat(e,'" node in the graph.'));var r=0;return"directed"!==this.type&&(r+=t.undirectedDegree),"undirected"!==this.type&&(r+=t.inDegree),r},i.outboundDegree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new W('Graph.outboundDegree: could not find the "'.concat(e,'" node in the graph.'));var r=0;return"directed"!==this.type&&(r+=t.undirectedDegree),"undirected"!==this.type&&(r+=t.outDegree),r},i.degree=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new W('Graph.degree: could not find the "'.concat(e,'" node in the graph.'));var r=0;return"directed"!==this.type&&(r+=t.undirectedDegree),"undirected"!==this.type&&(r+=t.inDegree+t.outDegree),r},i.inDegreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new W('Graph.inDegreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));return"undirected"===this.type?0:t.inDegree-t.directedLoops},i.outDegreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new W('Graph.outDegreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));return"undirected"===this.type?0:t.outDegree-t.directedLoops},i.directedDegreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new W('Graph.directedDegreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));return"undirected"===this.type?0:t.inDegree+t.outDegree-2*t.directedLoops},i.undirectedDegreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new W('Graph.undirectedDegreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));return"directed"===this.type?0:t.undirectedDegree-2*t.undirectedLoops},i.inboundDegreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new W('Graph.inboundDegreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));var r=0,n=0;return"directed"!==this.type&&(r+=t.undirectedDegree,n+=2*t.undirectedLoops),"undirected"!==this.type&&(r+=t.inDegree,n+=t.directedLoops),r-n},i.outboundDegreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new W('Graph.outboundDegreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));var r=0,n=0;return"directed"!==this.type&&(r+=t.undirectedDegree,n+=2*t.undirectedLoops),"undirected"!==this.type&&(r+=t.outDegree,n+=t.directedLoops),r-n},i.degreeWithoutSelfLoops=function(e){e=""+e;var t=this._nodes.get(e);if(!t)throw new W('Graph.degreeWithoutSelfLoops: could not find the "'.concat(e,'" node in the graph.'));var r=0,n=0;return"directed"!==this.type&&(r+=t.undirectedDegree,n+=2*t.undirectedLoops),"undirected"!==this.type&&(r+=t.inDegree+t.outDegree,n+=2*t.directedLoops),r-n},i.source=function(e){e=""+e;var t=this._edges.get(e);if(!t)throw new W('Graph.source: could not find the "'.concat(e,'" edge in the graph.'));return t.source.key},i.target=function(e){e=""+e;var t=this._edges.get(e);if(!t)throw new W('Graph.target: could not find the "'.concat(e,'" edge in the graph.'));return t.target.key},i.extremities=function(e){e=""+e;var t=this._edges.get(e);if(!t)throw new W('Graph.extremities: could not find the "'.concat(e,'" edge in the graph.'));return[t.source.key,t.target.key]},i.opposite=function(e,t){e=""+e,t=""+t;var r=this._edges.get(t);if(!r)throw new W('Graph.opposite: could not find the "'.concat(t,'" edge in the graph.'));var n=r.source.key,i=r.target.key;if(e===n)return i;if(e===i)return n;throw new W('Graph.opposite: the "'.concat(e,'" node is not attached to the "').concat(t,'" edge (').concat(n,", ").concat(i,")."))},i.hasExtremity=function(e,t){e=""+e,t=""+t;var r=this._edges.get(e);if(!r)throw new W('Graph.hasExtremity: could not find the "'.concat(e,'" edge in the graph.'));return r.source.key===t||r.target.key===t},i.isUndirected=function(e){e=""+e;var t=this._edges.get(e);if(!t)throw new W('Graph.isUndirected: could not find the "'.concat(e,'" edge in the graph.'));return t.undirected},i.isDirected=function(e){e=""+e;var t=this._edges.get(e);if(!t)throw new W('Graph.isDirected: could not find the "'.concat(e,'" edge in the graph.'));return!t.undirected},i.isSelfLoop=function(e){e=""+e;var t=this._edges.get(e);if(!t)throw new W('Graph.isSelfLoop: could not find the "'.concat(e,'" edge in the graph.'));return t.source===t.target},i.addNode=function(e,t){var r=function(e,t,r){if(r&&!h(r))throw new I('Graph.addNode: invalid attributes. Expecting an object but got "'.concat(r,'"'));if(t=""+t,r=r||{},e._nodes.has(t))throw new q('Graph.addNode: the "'.concat(t,'" node already exist in the graph.'));var n=new e.NodeDataClass(t,r);return e._nodes.set(t,n),e.emit("nodeAdded",{key:t,attributes:r}),n}(this,e,t);return r.key},i.mergeNode=function(e,t){if(t&&!h(t))throw new I('Graph.mergeNode: invalid attributes. Expecting an object but got "'.concat(t,'"'));e=""+e,t=t||{};var r=this._nodes.get(e);return r?(t&&(c(r.attributes,t),this.emit("nodeAttributesUpdated",{type:"merge",key:e,attributes:r.attributes,data:t})),[e,!1]):(r=new this.NodeDataClass(e,t),this._nodes.set(e,r),this.emit("nodeAdded",{key:e,attributes:t}),[e,!0])},i.updateNode=function(e,t){if(t&&"function"!=typeof t)throw new I('Graph.updateNode: invalid updater function. Expecting a function but got "'.concat(t,'"'));e=""+e;var r=this._nodes.get(e);if(r){if(t){var n=r.attributes;r.attributes=t(n),this.emit("nodeAttributesUpdated",{type:"replace",key:e,attributes:r.attributes})}return[e,!1]}var i=t?t({}):{};return r=new this.NodeDataClass(e,i),this._nodes.set(e,r),this.emit("nodeAdded",{key:e,attributes:i}),[e,!0]},i.dropNode=function(e){e=""+e;var t,r=this._nodes.get(e);if(!r)throw new W('Graph.dropNode: could not find the "'.concat(e,'" node in the graph.'));if("undirected"!==this.type){for(var n in r.out){t=r.out[n];do{Te(this,t),t=t.next}while(t)}for(var i in r.in){t=r.in[i];do{Te(this,t),t=t.next}while(t)}}if("directed"!==this.type)for(var o in r.undirected){t=r.undirected[o];do{Te(this,t),t=t.next}while(t)}this._nodes.delete(e),this.emit("nodeDropped",{key:e,attributes:r.attributes})},i.dropEdge=function(e){var t;if(arguments.length>1){var r=""+arguments[0],n=""+arguments[1];if(!(t=u(this,r,n,this.type)))throw new W('Graph.dropEdge: could not find the "'.concat(r,'" -> "').concat(n,'" edge in the graph.'))}else if(e=""+e,!(t=this._edges.get(e)))throw new W('Graph.dropEdge: could not find the "'.concat(e,'" edge in the graph.'));return Te(this,t),this},i.dropDirectedEdge=function(e,t){if(arguments.length<2)throw new q("Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new q("Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");var r=u(this,e=""+e,t=""+t,"directed");if(!r)throw new W('Graph.dropDirectedEdge: could not find a "'.concat(e,'" -> "').concat(t,'" edge in the graph.'));return Te(this,r),this},i.dropUndirectedEdge=function(e,t){if(arguments.length<2)throw new q("Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new q("Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");var r=u(this,e,t,"undirected");if(!r)throw new W('Graph.dropUndirectedEdge: could not find a "'.concat(e,'" -> "').concat(t,'" edge in the graph.'));return Te(this,r),this},i.clear=function(){this._edges.clear(),this._nodes.clear(),this._resetInstanceCounters(),this.emit("cleared")},i.clearEdges=function(){for(var e,t=this._nodes.values();!0!==(e=t.next()).done;)e.value.clear();this._edges.clear(),this._resetInstanceCounters(),this.emit("edgesCleared")},i.getAttribute=function(e){return this._attributes[e]},i.getAttributes=function(){return this._attributes},i.hasAttribute=function(e){return this._attributes.hasOwnProperty(e)},i.setAttribute=function(e,t){return this._attributes[e]=t,this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:e}),this},i.updateAttribute=function(e,t){if("function"!=typeof t)throw new I("Graph.updateAttribute: updater should be a function.");var r=this._attributes[e];return this._attributes[e]=t(r),this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:e}),this},i.removeAttribute=function(e){return delete this._attributes[e],this.emit("attributesUpdated",{type:"remove",attributes:this._attributes,name:e}),this},i.replaceAttributes=function(e){if(!h(e))throw new I("Graph.replaceAttributes: provided attributes are not a plain object.");return this._attributes=e,this.emit("attributesUpdated",{type:"replace",attributes:this._attributes}),this},i.mergeAttributes=function(e){if(!h(e))throw new I("Graph.mergeAttributes: provided attributes are not a plain object.");return c(this._attributes,e),this.emit("attributesUpdated",{type:"merge",attributes:this._attributes,data:e}),this},i.updateAttributes=function(e){if("function"!=typeof e)throw new I("Graph.updateAttributes: provided updater is not a function.");return this._attributes=e(this._attributes),this.emit("attributesUpdated",{type:"update",attributes:this._attributes}),this},i.updateEachNodeAttributes=function(e,t){if("function"!=typeof e)throw new I("Graph.updateEachNodeAttributes: expecting an updater function.");if(t&&!f(t))throw new I("Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");for(var r,n,i=this._nodes.values();!0!==(r=i.next()).done;)(n=r.value).attributes=e(n.key,n.attributes);this.emit("eachNodeAttributesUpdated",{hints:t||null})},i.updateEachEdgeAttributes=function(e,t){if("function"!=typeof e)throw new I("Graph.updateEachEdgeAttributes: expecting an updater function.");if(t&&!f(t))throw new I("Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");for(var r,n,i,o,a=this._edges.values();!0!==(r=a.next()).done;)i=(n=r.value).source,o=n.target,n.attributes=e(n.key,n.attributes,i.key,o.key,i.attributes,o.attributes,n.undirected);this.emit("eachEdgeAttributesUpdated",{hints:t||null})},i.forEachAdjacencyEntry=function(e){if("function"!=typeof e)throw new I("Graph.forEachAdjacencyEntry: expecting a callback.");xe(!1,!1,!1,this,e)},i.forEachAdjacencyEntryWithOrphans=function(e){if("function"!=typeof e)throw new I("Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.");xe(!1,!1,!0,this,e)},i.forEachAssymetricAdjacencyEntry=function(e){if("function"!=typeof e)throw new I("Graph.forEachAssymetricAdjacencyEntry: expecting a callback.");xe(!1,!0,!1,this,e)},i.forEachAssymetricAdjacencyEntryWithOrphans=function(e){if("function"!=typeof e)throw new I("Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.");xe(!1,!0,!0,this,e)},i.nodes=function(){return"function"==typeof Array.from?Array.from(this._nodes.keys()):z(this._nodes.keys(),this._nodes.size)},i.forEachNode=function(e){if("function"!=typeof e)throw new I("Graph.forEachNode: expecting a callback.");for(var t,r,n=this._nodes.values();!0!==(t=n.next()).done;)e((r=t.value).key,r.attributes)},i.findNode=function(e){if("function"!=typeof e)throw new I("Graph.findNode: expecting a callback.");for(var t,r,n=this._nodes.values();!0!==(t=n.next()).done;)if(e((r=t.value).key,r.attributes))return r.key},i.mapNodes=function(e){if("function"!=typeof e)throw new I("Graph.mapNode: expecting a callback.");for(var t,r,n=this._nodes.values(),i=new Array(this.order),o=0;!0!==(t=n.next()).done;)r=t.value,i[o++]=e(r.key,r.attributes);return i},i.someNode=function(e){if("function"!=typeof e)throw new I("Graph.someNode: expecting a callback.");for(var t,r,n=this._nodes.values();!0!==(t=n.next()).done;)if(e((r=t.value).key,r.attributes))return!0;return!1},i.everyNode=function(e){if("function"!=typeof e)throw new I("Graph.everyNode: expecting a callback.");for(var t,r,n=this._nodes.values();!0!==(t=n.next()).done;)if(!e((r=t.value).key,r.attributes))return!1;return!0},i.filterNodes=function(e){if("function"!=typeof e)throw new I("Graph.filterNodes: expecting a callback.");for(var t,r,n=this._nodes.values(),i=[];!0!==(t=n.next()).done;)e((r=t.value).key,r.attributes)&&i.push(r.key);return i},i.reduceNodes=function(e,t){if("function"!=typeof e)throw new I("Graph.reduceNodes: expecting a callback.");if(arguments.length<2)throw new I("Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.");for(var r,n,i=t,o=this._nodes.values();!0!==(r=o.next()).done;)i=e(i,(n=r.value).key,n.attributes);return i},i.nodeEntries=function(){var e=this._nodes.values();return new P((function(){var t=e.next();if(t.done)return t;var r=t.value;return{value:{node:r.key,attributes:r.attributes},done:!1}}))},i.export=function(){var e=this,t=new Array(this._nodes.size),r=0;this._nodes.forEach((function(e,n){t[r++]=function(e,t){var r={key:e};return d(t.attributes)||(r.attributes=c({},t.attributes)),r}(n,e)}));var n=new Array(this._edges.size);return r=0,this._edges.forEach((function(t,i){n[r++]=function(e,t,r){var n={key:t,source:r.source.key,target:r.target.key};return d(r.attributes)||(n.attributes=c({},r.attributes)),"mixed"===e&&r.undirected&&(n.undirected=!0),n}(e.type,i,t)})),{options:{type:this.type,multi:this.multi,allowSelfLoops:this.allowSelfLoops},attributes:this.getAttributes(),nodes:t,edges:n}},i.import=function(e){var t,r,i,o,a,s=this,c=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(e instanceof n)return e.forEachNode((function(e,t){c?s.mergeNode(e,t):s.addNode(e,t)})),e.forEachEdge((function(e,t,r,n,i,o,a){c?a?s.mergeUndirectedEdgeWithKey(e,r,n,t):s.mergeDirectedEdgeWithKey(e,r,n,t):a?s.addUndirectedEdgeWithKey(e,r,n,t):s.addDirectedEdgeWithKey(e,r,n,t)})),this;if(!h(e))throw new I("Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.");if(e.attributes){if(!h(e.attributes))throw new I("Graph.import: invalid attributes. Expecting a plain object.");c?this.mergeAttributes(e.attributes):this.replaceAttributes(e.attributes)}if(e.nodes){if(i=e.nodes,!Array.isArray(i))throw new I("Graph.import: invalid nodes. Expecting an array.");for(t=0,r=i.length;t<r;t++){Ee(o=i[t]);var u=o,d=u.key,l=u.attributes;c?this.mergeNode(d,l):this.addNode(d,l)}}if(e.edges){var p=!1;if("undirected"===this.type&&(p=!0),i=e.edges,!Array.isArray(i))throw new I("Graph.import: invalid edges. Expecting an array.");for(t=0,r=i.length;t<r;t++){Le(a=i[t]);var f=a,g=f.source,y=f.target,v=f.attributes,m=f.undirected,b=void 0===m?p:m;"key"in a?(c?b?this.mergeUndirectedEdgeWithKey:this.mergeDirectedEdgeWithKey:b?this.addUndirectedEdgeWithKey:this.addDirectedEdgeWithKey).call(this,a.key,g,y,v):(c?b?this.mergeUndirectedEdge:this.mergeDirectedEdge:b?this.addUndirectedEdge:this.addDirectedEdge).call(this,g,y,v)}}return this},i.nullCopy=function(e){var t=new n(c({},this._options,e));return t.replaceAttributes(c({},this.getAttributes())),t},i.emptyCopy=function(e){var t=this.nullCopy(e);return this._nodes.forEach((function(e,r){var n=c({},e.attributes);e=new t.NodeDataClass(r,n),t._nodes.set(r,e)})),t},i.copy=function(e){if("string"==typeof(e=e||{}).type&&e.type!==this.type&&"mixed"!==e.type)throw new q('Graph.copy: cannot create an incompatible copy from "'.concat(this.type,'" type to "').concat(e.type,'" because this would mean losing information about the current graph.'));if("boolean"==typeof e.multi&&e.multi!==this.multi&&!0!==e.multi)throw new q("Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.");if("boolean"==typeof e.allowSelfLoops&&e.allowSelfLoops!==this.allowSelfLoops&&!0!==e.allowSelfLoops)throw new q("Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.");for(var t,r,n=this.emptyCopy(e),i=this._edges.values();!0!==(t=i.next()).done;)De(n,"copy",!1,(r=t.value).undirected,r.key,r.source.key,r.target.key,c({},r.attributes));return n},i.toJSON=function(){return this.export()},i.toString=function(){return"[object Graph]"},i.inspect=function(){var t=this,r={};this._nodes.forEach((function(e,t){r[t]=e.attributes}));var n={},i={};this._edges.forEach((function(e,r){var o,a=e.undirected?"--":"->",s="",c=e.source.key,u=e.target.key;e.undirected&&c>u&&(o=c,c=u,u=o);var h="(".concat(c,")").concat(a,"(").concat(u,")");r.startsWith("geid_")?t.multi&&(void 0===i[h]?i[h]=0:i[h]++,s+="".concat(i[h],". ")):s+="[".concat(r,"]: "),n[s+=h]=e.attributes}));var o={};for(var a in this)this.hasOwnProperty(a)&&!ke.has(a)&&"function"!=typeof this[a]&&"symbol"!==e(a)&&(o[a]=this[a]);return o.attributes=this._attributes,o.nodes=r,o.edges=n,l(o,"constructor",this.constructor),o},n}(y.exports.EventEmitter);"undefined"!=typeof Symbol&&(Oe.prototype[Symbol.for("nodejs.util.inspect.custom")]=Oe.prototype.inspect),[{name:function(e){return"".concat(e,"Edge")},generateKey:!0},{name:function(e){return"".concat(e,"DirectedEdge")},generateKey:!0,type:"directed"},{name:function(e){return"".concat(e,"UndirectedEdge")},generateKey:!0,type:"undirected"},{name:function(e){return"".concat(e,"EdgeWithKey")}},{name:function(e){return"".concat(e,"DirectedEdgeWithKey")},type:"directed"},{name:function(e){return"".concat(e,"UndirectedEdgeWithKey")},type:"undirected"}].forEach((function(e){["add","merge","update"].forEach((function(t){var r=e.name(t),n="add"===t?De:Pe;e.generateKey?Oe.prototype[r]=function(i,o,a){return n(this,r,!0,"undirected"===(e.type||this.type),null,i,o,a,"update"===t)}:Oe.prototype[r]=function(i,o,a,s){return n(this,r,!1,"undirected"===(e.type||this.type),i,o,a,s,"update"===t)}}))})),function(e){X.forEach((function(t){var r=t.name,n=t.attacher;n(e,r("Node"),0),n(e,r("Source"),1),n(e,r("Target"),2),n(e,r("Opposite"),3)}))}(Oe),function(e){Q.forEach((function(t){var r=t.name,n=t.attacher;n(e,r("Edge"),"mixed"),n(e,r("DirectedEdge"),"directed"),n(e,r("UndirectedEdge"),"undirected")}))}(Oe),function(e){te.forEach((function(t){!function(e,t){var r=t.name,n=t.type,i=t.direction;e.prototype[r]=function(e,t){if("mixed"!==n&&"mixed"!==this.type&&n!==this.type)return[];if(!arguments.length)return ce(this,n);if(1===arguments.length){e=""+e;var o=this._nodes.get(e);if(void 0===o)throw new W("Graph.".concat(r,': could not find the "').concat(e,'" node in the graph.'));return le(this.multi,"mixed"===n?this.type:n,i,o)}if(2===arguments.length){e=""+e,t=""+t;var a=this._nodes.get(e);if(!a)throw new W("Graph.".concat(r,':  could not find the "').concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new W("Graph.".concat(r,':  could not find the "').concat(t,'" target node in the graph.'));return ge(n,this.multi,i,a,t)}throw new I("Graph.".concat(r,": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length,")."))}}(e,t),function(e,t){var r=t.name,n=t.type,i=t.direction,o="forEach"+r[0].toUpperCase()+r.slice(1,-1);e.prototype[o]=function(e,t,r){if("mixed"===n||"mixed"===this.type||n===this.type){if(1===arguments.length)return ue(!1,this,n,r=e);if(2===arguments.length){e=""+e,r=t;var a=this._nodes.get(e);if(void 0===a)throw new W("Graph.".concat(o,': could not find the "').concat(e,'" node in the graph.'));return de(!1,this.multi,"mixed"===n?this.type:n,i,a,r)}if(3===arguments.length){e=""+e,t=""+t;var s=this._nodes.get(e);if(!s)throw new W("Graph.".concat(o,':  could not find the "').concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new W("Graph.".concat(o,':  could not find the "').concat(t,'" target node in the graph.'));return fe(!1,n,this.multi,i,s,t,r)}throw new I("Graph.".concat(o,": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length,")."))}};var a="map"+r[0].toUpperCase()+r.slice(1);e.prototype[a]=function(){var e,t=Array.prototype.slice.call(arguments),r=t.pop();if(0===t.length){var i=0;"directed"!==n&&(i+=this.undirectedSize),"undirected"!==n&&(i+=this.directedSize),e=new Array(i);var a=0;t.push((function(t,n,i,o,s,c,u){e[a++]=r(t,n,i,o,s,c,u)}))}else e=[],t.push((function(t,n,i,o,a,s,c){e.push(r(t,n,i,o,a,s,c))}));return this[o].apply(this,t),e};var s="filter"+r[0].toUpperCase()+r.slice(1);e.prototype[s]=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),r=[];return e.push((function(e,n,i,o,a,s,c){t(e,n,i,o,a,s,c)&&r.push(e)})),this[o].apply(this,e),r};var c="reduce"+r[0].toUpperCase()+r.slice(1);e.prototype[c]=function(){var e,t,r=Array.prototype.slice.call(arguments);if(r.length<2||r.length>4)throw new I("Graph.".concat(c,": invalid number of arguments (expecting 2, 3 or 4 and got ").concat(r.length,")."));if("function"==typeof r[r.length-1]&&"function"!=typeof r[r.length-2])throw new I("Graph.".concat(c,": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));2===r.length?(e=r[0],t=r[1],r=[]):3===r.length?(e=r[1],t=r[2],r=[r[0]]):4===r.length&&(e=r[2],t=r[3],r=[r[0],r[1]]);var n=t;return r.push((function(t,r,i,o,a,s,c){n=e(n,t,r,i,o,a,s,c)})),this[o].apply(this,r),n}}(e,t),function(e,t){var r=t.name,n=t.type,i=t.direction,o="find"+r[0].toUpperCase()+r.slice(1,-1);e.prototype[o]=function(e,t,r){if("mixed"!==n&&"mixed"!==this.type&&n!==this.type)return!1;if(1===arguments.length)return ue(!0,this,n,r=e);if(2===arguments.length){e=""+e,r=t;var a=this._nodes.get(e);if(void 0===a)throw new W("Graph.".concat(o,': could not find the "').concat(e,'" node in the graph.'));return de(!0,this.multi,"mixed"===n?this.type:n,i,a,r)}if(3===arguments.length){e=""+e,t=""+t;var s=this._nodes.get(e);if(!s)throw new W("Graph.".concat(o,':  could not find the "').concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new W("Graph.".concat(o,':  could not find the "').concat(t,'" target node in the graph.'));return fe(!0,n,this.multi,i,s,t,r)}throw new I("Graph.".concat(o,": too many arguments (expecting 1, 2 or 3 and got ").concat(arguments.length,")."))};var a="some"+r[0].toUpperCase()+r.slice(1,-1);e.prototype[a]=function(){var e=Array.prototype.slice.call(arguments),t=e.pop();return e.push((function(e,r,n,i,o,a,s){return t(e,r,n,i,o,a,s)})),!!this[o].apply(this,e)};var s="every"+r[0].toUpperCase()+r.slice(1,-1);e.prototype[s]=function(){var e=Array.prototype.slice.call(arguments),t=e.pop();return e.push((function(e,r,n,i,o,a,s){return!t(e,r,n,i,o,a,s)})),!this[o].apply(this,e)}}(e,t),function(e,t){var r=t.name,n=t.type,i=t.direction,o=r.slice(0,-1)+"Entries";e.prototype[o]=function(e,t){if("mixed"!==n&&"mixed"!==this.type&&n!==this.type)return P.empty();if(!arguments.length)return he(this,n);if(1===arguments.length){e=""+e;var r=this._nodes.get(e);if(!r)throw new W("Graph.".concat(o,': could not find the "').concat(e,'" node in the graph.'));return pe(n,i,r)}if(2===arguments.length){e=""+e,t=""+t;var a=this._nodes.get(e);if(!a)throw new W("Graph.".concat(o,':  could not find the "').concat(e,'" source node in the graph.'));if(!this._nodes.has(t))throw new W("Graph.".concat(o,':  could not find the "').concat(t,'" target node in the graph.'));return ye(n,i,a,t)}throw new I("Graph.".concat(o,": too many arguments (expecting 0, 1 or 2 and got ").concat(arguments.length,")."))}}(e,t)}))}(Oe),function(e){ve.forEach((function(t){(function(e,t){var r=t.name,n=t.type,i=t.direction;e.prototype[r]=function(e){if("mixed"!==n&&"mixed"!==this.type&&n!==this.type)return[];e=""+e;var t=this._nodes.get(e);if(void 0===t)throw new W("Graph.".concat(r,': could not find the "').concat(e,'" node in the graph.'));return function(e,t,r){if("mixed"!==e){if("undirected"===e)return Object.keys(r.undirected);if("string"==typeof t)return Object.keys(r[t])}var n=[];return we(!1,e,t,r,(function(e){n.push(e)})),n}("mixed"===n?this.type:n,i,t)}})(e,t),function(e,t){var r=t.name,n=t.type,i=t.direction,o="forEach"+r[0].toUpperCase()+r.slice(1,-1);e.prototype[o]=function(e,t){if("mixed"===n||"mixed"===this.type||n===this.type){e=""+e;var r=this._nodes.get(e);if(void 0===r)throw new W("Graph.".concat(o,': could not find the "').concat(e,'" node in the graph.'));we(!1,"mixed"===n?this.type:n,i,r,t)}};var a="map"+r[0].toUpperCase()+r.slice(1);e.prototype[a]=function(e,t){var r=[];return this[o](e,(function(e,n){r.push(t(e,n))})),r};var s="filter"+r[0].toUpperCase()+r.slice(1);e.prototype[s]=function(e,t){var r=[];return this[o](e,(function(e,n){t(e,n)&&r.push(e)})),r};var c="reduce"+r[0].toUpperCase()+r.slice(1);e.prototype[c]=function(e,t,r){if(arguments.length<3)throw new I("Graph.".concat(c,": missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array."));var n=r;return this[o](e,(function(e,r){n=t(n,e,r)})),n}}(e,t),function(e,t){var r=t.name,n=t.type,i=t.direction,o=r[0].toUpperCase()+r.slice(1,-1),a="find"+o;e.prototype[a]=function(e,t){if("mixed"===n||"mixed"===this.type||n===this.type){e=""+e;var r=this._nodes.get(e);if(void 0===r)throw new W("Graph.".concat(a,': could not find the "').concat(e,'" node in the graph.'));return we(!0,"mixed"===n?this.type:n,i,r,t)}};var s="some"+o;e.prototype[s]=function(e,t){return!!this[a](e,t)};var c="every"+o;e.prototype[c]=function(e,t){return!this[a](e,(function(e,r){return!t(e,r)}))}}(e,t),function(e,t){var r=t.name,n=t.type,i=t.direction,o=r.slice(0,-1)+"Entries";e.prototype[o]=function(e){if("mixed"!==n&&"mixed"!==this.type&&n!==this.type)return P.empty();e=""+e;var t=this._nodes.get(e);if(void 0===t)throw new W("Graph.".concat(o,': could not find the "').concat(e,'" node in the graph.'));return function(e,t,r){if("mixed"!==e){if("undirected"===e)return _e(null,r,r.undirected);if("string"==typeof t)return _e(null,r,r[t])}var n=P.empty(),i=new me;return"undirected"!==e&&("out"!==t&&(n=ee(n,_e(i,r,r.in))),"in"!==t&&(n=ee(n,_e(i,r,r.out)))),"directed"!==e&&(n=ee(n,_e(i,r,r.undirected))),n}("mixed"===n?this.type:n,i,t)}}(e,t)}))}(Oe);var Me=function(e){function r(t){var r=c({type:"directed"},t);if("multi"in r&&!1!==r.multi)throw new I("DirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if("directed"!==r.type)throw new I('DirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return e.call(this,r)||this}return t(r,e),r}(Oe),Re=function(e){function r(t){var r=c({type:"undirected"},t);if("multi"in r&&!1!==r.multi)throw new I("UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if("undirected"!==r.type)throw new I('UndirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return e.call(this,r)||this}return t(r,e),r}(Oe),Ne=function(e){function r(t){var r=c({multi:!0},t);if("multi"in r&&!0!==r.multi)throw new I("MultiGraph.from: inconsistent indication that the graph should be simple in given options!");return e.call(this,r)||this}return t(r,e),r}(Oe),je=function(e){function r(t){var r=c({type:"directed",multi:!0},t);if("multi"in r&&!0!==r.multi)throw new I("MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if("directed"!==r.type)throw new I('MultiDirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return e.call(this,r)||this}return t(r,e),r}(Oe),Ue=function(e){function r(t){var r=c({type:"undirected",multi:!0},t);if("multi"in r&&!0!==r.multi)throw new I("MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if("undirected"!==r.type)throw new I('MultiUndirectedGraph.from: inconsistent "'+r.type+'" type in given options!');return e.call(this,r)||this}return t(r,e),r}(Oe);function ze(e){e.from=function(t,r){var n=c({},t.options,r),i=new e(n);return i.import(t),i}}return ze(Oe),ze(Me),ze(Re),ze(Ne),ze(je),ze(Ue),Oe.Graph=Oe,Oe.DirectedGraph=Me,Oe.UndirectedGraph=Re,Oe.MultiGraph=Ne,Oe.MultiDirectedGraph=je,Oe.MultiUndirectedGraph=Ue,Oe.InvalidArgumentsGraphError=I,Oe.NotFoundGraphError=W,Oe.UsageGraphError=q,Oe}()},554:function(e,t,r){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(227),s=o(r(941)),c=r(524),u=r(291),h=1.5,d=function(e){function t(){var t=e.call(this)||this;return t.x=.5,t.y=.5,t.angle=0,t.ratio=1,t.minRatio=null,t.maxRatio=null,t.nextFrame=null,t.previousState=null,t.enabled=!0,t.previousState=t.getState(),t}return i(t,e),t.from=function(e){return(new t).setState(e)},t.prototype.enable=function(){return this.enabled=!0,this},t.prototype.disable=function(){return this.enabled=!1,this},t.prototype.getState=function(){return{x:this.x,y:this.y,angle:this.angle,ratio:this.ratio}},t.prototype.hasState=function(e){return this.x===e.x&&this.y===e.y&&this.ratio===e.ratio&&this.angle===e.angle},t.prototype.getPreviousState=function(){var e=this.previousState;return e?{x:e.x,y:e.y,angle:e.angle,ratio:e.ratio}:null},t.prototype.getBoundedRatio=function(e){var t=e;return"number"==typeof this.minRatio&&(t=Math.max(t,this.minRatio)),"number"==typeof this.maxRatio&&(t=Math.min(t,this.maxRatio)),t},t.prototype.validateState=function(e){var t={};return"number"==typeof e.x&&(t.x=e.x),"number"==typeof e.y&&(t.y=e.y),"number"==typeof e.angle&&(t.angle=e.angle),"number"==typeof e.ratio&&(t.ratio=this.getBoundedRatio(e.ratio)),t},t.prototype.isAnimated=function(){return!!this.nextFrame},t.prototype.setState=function(e){if(!this.enabled)return this;this.previousState=this.getState();var t=this.validateState(e);return"number"==typeof t.x&&(this.x=t.x),"number"==typeof t.y&&(this.y=t.y),"number"==typeof t.angle&&(this.angle=t.angle),"number"==typeof t.ratio&&(this.ratio=t.ratio),this.hasState(this.previousState)||this.emit("updated",this.getState()),this},t.prototype.updateState=function(e){return this.setState(e(this.getState())),this},t.prototype.animate=function(e,t,r){var n=this;if(this.enabled){var i=Object.assign({},a.ANIMATE_DEFAULTS,t),o=this.validateState(e),u="function"==typeof i.easing?i.easing:s.default[i.easing],h=Date.now(),d=this.getState(),l=function(){var e=(Date.now()-h)/i.duration;if(e>=1)return n.nextFrame=null,n.setState(o),void(n.animationCallback&&(n.animationCallback.call(null),n.animationCallback=void 0));var t=u(e),r={};"number"==typeof o.x&&(r.x=d.x+(o.x-d.x)*t),"number"==typeof o.y&&(r.y=d.y+(o.y-d.y)*t),"number"==typeof o.angle&&(r.angle=d.angle+(o.angle-d.angle)*t),"number"==typeof o.ratio&&(r.ratio=d.ratio+(o.ratio-d.ratio)*t),n.setState(r),n.nextFrame=(0,c.requestFrame)(l)};this.nextFrame?((0,c.cancelFrame)(this.nextFrame),this.animationCallback&&this.animationCallback.call(null),this.nextFrame=(0,c.requestFrame)(l)):l(),this.animationCallback=r}},t.prototype.animatedZoom=function(e){if(e){if("number"==typeof e)return this.animate({ratio:this.ratio/e});this.animate({ratio:this.ratio/(e.factor||h)},e)}else this.animate({ratio:this.ratio/h})},t.prototype.animatedUnzoom=function(e){if(e){if("number"==typeof e)return this.animate({ratio:this.ratio*e});this.animate({ratio:this.ratio*(e.factor||h)},e)}else this.animate({ratio:this.ratio*h})},t.prototype.animatedReset=function(e){this.animate({x:.5,y:.5,ratio:1,angle:0},e)},t.prototype.copy=function(){return t.from(this.getState())},t}(u.TypedEventEmitter);t.default=d},760:function(e,t,r){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.getWheelDelta=t.getTouchCoords=t.getTouchesArray=t.getWheelCoords=t.getMouseCoords=t.getPosition=void 0;var a=r(291);function s(e,t){var r=t.getBoundingClientRect();return{x:e.clientX-r.left,y:e.clientY-r.top}}function c(e,t){var r=o(o({},s(e,t)),{sigmaDefaultPrevented:!1,preventSigmaDefault:function(){r.sigmaDefaultPrevented=!0},original:e});return r}function u(e){for(var t=[],r=0,n=Math.min(e.length,2);r<n;r++)t.push(e[r]);return t}function h(e){if(void 0!==e.deltaY)return-3*e.deltaY/360;if(void 0!==e.detail)return e.detail/-9;throw new Error("Captor: could not extract delta from event.")}t.getPosition=s,t.getMouseCoords=c,t.getWheelCoords=function(e,t){return o(o({},c(e,t)),{delta:h(e)})},t.getTouchesArray=u,t.getTouchCoords=function(e,t){return{touches:u(e.touches).map((function(e){return s(e,t)})),original:e}},t.getWheelDelta=h;var d=function(e){function t(t,r){var n=e.call(this)||this;return n.container=t,n.renderer=r,n}return i(t,e),t}(a.TypedEventEmitter);t.default=d},886:function(e,t,r){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});var c=s(r(760)),u=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.enabled=!0,n.draggedEvents=0,n.downStartTime=null,n.lastMouseX=null,n.lastMouseY=null,n.isMouseDown=!1,n.isMoving=!1,n.movingTimeout=null,n.startCameraState=null,n.clicks=0,n.doubleClickTimeout=null,n.currentWheelDirection=0,n.handleClick=n.handleClick.bind(n),n.handleRightClick=n.handleRightClick.bind(n),n.handleDown=n.handleDown.bind(n),n.handleUp=n.handleUp.bind(n),n.handleMove=n.handleMove.bind(n),n.handleWheel=n.handleWheel.bind(n),n.handleOut=n.handleOut.bind(n),t.addEventListener("click",n.handleClick,!1),t.addEventListener("contextmenu",n.handleRightClick,!1),t.addEventListener("mousedown",n.handleDown,!1),t.addEventListener("wheel",n.handleWheel,!1),t.addEventListener("mouseout",n.handleOut,!1),document.addEventListener("mousemove",n.handleMove,!1),document.addEventListener("mouseup",n.handleUp,!1),n}return i(t,e),t.prototype.kill=function(){var e=this.container;e.removeEventListener("click",this.handleClick),e.removeEventListener("contextmenu",this.handleRightClick),e.removeEventListener("mousedown",this.handleDown),e.removeEventListener("wheel",this.handleWheel),e.removeEventListener("mouseout",this.handleOut),document.removeEventListener("mousemove",this.handleMove),document.removeEventListener("mouseup",this.handleUp)},t.prototype.handleClick=function(e){var t=this;if(this.enabled){if(this.clicks++,2===this.clicks)return this.clicks=0,"number"==typeof this.doubleClickTimeout&&(clearTimeout(this.doubleClickTimeout),this.doubleClickTimeout=null),this.handleDoubleClick(e);setTimeout((function(){t.clicks=0,t.doubleClickTimeout=null}),300),this.draggedEvents<3&&this.emit("click",(0,c.getMouseCoords)(e,this.container))}},t.prototype.handleRightClick=function(e){this.enabled&&this.emit("rightClick",(0,c.getMouseCoords)(e,this.container))},t.prototype.handleDoubleClick=function(e){if(this.enabled){e.preventDefault(),e.stopPropagation();var t=(0,c.getMouseCoords)(e,this.container);if(this.emit("doubleClick",t),!t.sigmaDefaultPrevented){var r=this.renderer.getCamera(),n=r.getBoundedRatio(r.getState().ratio/2.2);r.animate(this.renderer.getViewportZoomedState((0,c.getPosition)(e,this.container),n),{easing:"quadraticInOut",duration:200})}}},t.prototype.handleDown=function(e){if(this.enabled){if(0===e.button){this.startCameraState=this.renderer.getCamera().getState();var t=(0,c.getPosition)(e,this.container),r=t.x,n=t.y;this.lastMouseX=r,this.lastMouseY=n,this.draggedEvents=0,this.downStartTime=Date.now(),this.isMouseDown=!0}this.emit("mousedown",(0,c.getMouseCoords)(e,this.container))}},t.prototype.handleUp=function(e){var t=this;if(this.enabled&&this.isMouseDown){var r=this.renderer.getCamera();this.isMouseDown=!1,"number"==typeof this.movingTimeout&&(clearTimeout(this.movingTimeout),this.movingTimeout=null);var n=(0,c.getPosition)(e,this.container),i=n.x,o=n.y,a=r.getState(),s=r.getPreviousState()||{x:0,y:0};this.isMoving?r.animate({x:a.x+3*(a.x-s.x),y:a.y+3*(a.y-s.y)},{duration:200,easing:"quadraticOut"}):this.lastMouseX===i&&this.lastMouseY===o||r.setState({x:a.x,y:a.y}),this.isMoving=!1,setTimeout((function(){t.draggedEvents=0,t.renderer.refresh()}),0),this.emit("mouseup",(0,c.getMouseCoords)(e,this.container))}},t.prototype.handleMove=function(e){var t=this;if(this.enabled){var r=(0,c.getMouseCoords)(e,this.container);if(this.emit("mousemovebody",r),e.target===this.container&&this.emit("mousemove",r),!r.sigmaDefaultPrevented&&this.isMouseDown){this.isMoving=!0,this.draggedEvents++,"number"==typeof this.movingTimeout&&clearTimeout(this.movingTimeout),this.movingTimeout=window.setTimeout((function(){t.movingTimeout=null,t.isMoving=!1}),100);var n=this.renderer.getCamera(),i=(0,c.getPosition)(e,this.container),o=i.x,a=i.y,s=this.renderer.viewportToFramedGraph({x:this.lastMouseX,y:this.lastMouseY}),u=this.renderer.viewportToFramedGraph({x:o,y:a}),h=s.x-u.x,d=s.y-u.y,l=n.getState(),p=l.x+h,f=l.y+d;n.setState({x:p,y:f}),this.lastMouseX=o,this.lastMouseY=a,e.preventDefault(),e.stopPropagation()}}},t.prototype.handleWheel=function(e){var t=this;if(this.enabled){e.preventDefault(),e.stopPropagation();var r=(0,c.getWheelDelta)(e);if(r){var n=(0,c.getWheelCoords)(e,this.container);if(this.emit("wheel",n),!n.sigmaDefaultPrevented){var i=r>0?1/1.7:1.7,o=this.renderer.getCamera(),a=o.getBoundedRatio(o.getState().ratio*i),s=r>0?1:-1,u=Date.now();this.currentWheelDirection===s&&this.lastWheelTriggerTime&&u-this.lastWheelTriggerTime<50||(o.animate(this.renderer.getViewportZoomedState((0,c.getPosition)(e,this.container),a),{easing:"quadraticOut",duration:250},(function(){t.currentWheelDirection=0})),this.currentWheelDirection=s,this.lastWheelTriggerTime=u)}}}},t.prototype.handleOut=function(){},t}(c.default);t.default=u},311:function(e,t,r){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return a(t,e),t},c=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a};Object.defineProperty(t,"__esModule",{value:!0});var u=s(r(760)),h=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.enabled=!0,n.isMoving=!1,n.hasMoved=!1,n.touchMode=0,n.startTouchesPositions=[],n.handleStart=n.handleStart.bind(n),n.handleLeave=n.handleLeave.bind(n),n.handleMove=n.handleMove.bind(n),t.addEventListener("touchstart",n.handleStart,!1),t.addEventListener("touchend",n.handleLeave,!1),t.addEventListener("touchcancel",n.handleLeave,!1),t.addEventListener("touchmove",n.handleMove,!1),n}return i(t,e),t.prototype.kill=function(){var e=this.container;e.removeEventListener("touchstart",this.handleStart),e.removeEventListener("touchend",this.handleLeave),e.removeEventListener("touchcancel",this.handleLeave),e.removeEventListener("touchmove",this.handleMove)},t.prototype.getDimensions=function(){return{width:this.container.offsetWidth,height:this.container.offsetHeight}},t.prototype.dispatchRelatedMouseEvent=function(e,t,r,n){var i=r||t.touches[0],o=new MouseEvent(e,{clientX:i.clientX,clientY:i.clientY,altKey:t.altKey,ctrlKey:t.ctrlKey});o.isFakeSigmaMouseEvent=!0,(n||this.container).dispatchEvent(o)},t.prototype.handleStart=function(e){var t=this;if(this.enabled){e.preventDefault(),1===e.touches.length&&this.dispatchRelatedMouseEvent("mousedown",e);var r=(0,u.getTouchesArray)(e.touches);if(this.touchMode=r.length,this.startCameraState=this.renderer.getCamera().getState(),this.startTouchesPositions=r.map((function(e){return(0,u.getPosition)(e,t.container)})),this.lastTouches=r,this.lastTouchesPositions=this.startTouchesPositions,2===this.touchMode){var n=c(this.startTouchesPositions,2),i=n[0],o=i.x,a=i.y,s=n[1],h=s.x,d=s.y;this.startTouchesAngle=Math.atan2(d-a,h-o),this.startTouchesDistance=Math.sqrt(Math.pow(h-o,2)+Math.pow(d-a,2))}this.emit("touchdown",(0,u.getTouchCoords)(e,this.container))}},t.prototype.handleLeave=function(e){if(this.enabled){switch(e.preventDefault(),0===e.touches.length&&this.lastTouches&&this.lastTouches.length&&(this.dispatchRelatedMouseEvent("mouseup",e,this.lastTouches[0],document),this.hasMoved||this.dispatchRelatedMouseEvent("click",e,this.lastTouches[0])),this.movingTimeout&&(this.isMoving=!1,clearTimeout(this.movingTimeout)),this.touchMode){case 2:if(1===e.touches.length){this.handleStart(e),e.preventDefault();break}case 1:if(this.isMoving){var t=this.renderer.getCamera(),r=t.getState(),n=t.getPreviousState()||{x:0,y:0};t.animate({x:r.x+3*(r.x-n.x),y:r.y+3*(r.y-n.y)},{duration:200,easing:"quadraticOut"})}this.hasMoved=!1,this.isMoving=!1,this.touchMode=0}this.emit("touchup",(0,u.getTouchCoords)(e,this.container))}},t.prototype.handleMove=function(e){var t,r=this;if(this.enabled){e.preventDefault(),1===e.touches.length&&this.dispatchRelatedMouseEvent("mousemove",e);var n=(0,u.getTouchesArray)(e.touches),i=n.map((function(e){return(0,u.getPosition)(e,r.container)}));if(this.lastTouches=n,this.lastTouchesPositions=i,this.hasMoved||(this.hasMoved=i.some((function(e,t){var n=r.startTouchesPositions[t];return e.x!==n.x||e.y!==n.y}))),this.hasMoved){this.isMoving=!0,this.movingTimeout&&clearTimeout(this.movingTimeout),this.movingTimeout=window.setTimeout((function(){r.isMoving=!1}),200);var o=this.renderer.getCamera(),a=this.startCameraState;switch(this.touchMode){case 1:var s=this.renderer.viewportToFramedGraph((this.startTouchesPositions||[])[0]),h=s.x,d=s.y,l=this.renderer.viewportToFramedGraph(i[0]),p=l.x,f=l.y;o.setState({x:a.x+h-p,y:a.y+d-f});break;case 2:var g={},y=i[0],v=y.x,m=y.y,b=i[1],w=b.x,_=b.y,x=Math.atan2(_-m,w-v)-this.startTouchesAngle,E=Math.hypot(_-m,w-v)/this.startTouchesDistance,L=o.getBoundedRatio(a.ratio/E);g.ratio=L,g.angle=a.angle+x;var A=this.getDimensions(),S=this.renderer.viewportToFramedGraph((this.startTouchesPositions||[])[0],{cameraState:a}),C=Math.min(A.width,A.height),k=C/A.width,G=L/C;f=m-C/2/(C/A.height),p=(t=c([(p=v-C/2/k)*Math.cos(-g.angle)-f*Math.sin(-g.angle),f*Math.cos(-g.angle)+p*Math.sin(-g.angle)],2))[0],f=t[1],g.x=S.x-p*G,g.y=S.y+f*G,o.setState(g)}this.emit("touchmove",(0,u.getTouchCoords)(e,this.container))}}},t}(u.default);t.default=h},98:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.edgeLabelsToDisplayFromNodes=t.LabelGrid=void 0;var r=function(){function e(e,t){this.key=e,this.size=t}return e.compare=function(e,t){return e.size>t.size?-1:e.size<t.size||e.key>t.key?1:-1},e}(),n=function(){function e(){this.width=0,this.height=0,this.cellSize=0,this.columns=0,this.rows=0,this.cells={}}return e.prototype.resizeAndClear=function(e,t){this.width=e.width,this.height=e.height,this.cellSize=t,this.columns=Math.ceil(e.width/t),this.rows=Math.ceil(e.height/t),this.cells={}},e.prototype.getIndex=function(e){var t=Math.floor(e.x/this.cellSize);return Math.floor(e.y/this.cellSize)*this.columns+t},e.prototype.add=function(e,t,n){var i=new r(e,t),o=this.getIndex(n),a=this.cells[o];a||(a=[],this.cells[o]=a),a.push(i)},e.prototype.organize=function(){for(var e in this.cells)this.cells[e].sort(r.compare)},e.prototype.getLabelsToDisplay=function(e,t){var r=this.cellSize*this.cellSize,n=r/e/e*t/r,i=Math.ceil(n),o=[];for(var a in this.cells)for(var s=this.cells[a],c=0;c<Math.min(i,s.length);c++)o.push(s[c].key);return o},e}();t.LabelGrid=n,t.edgeLabelsToDisplayFromNodes=function(e){var t=e.graph,r=e.hoveredNode,n=e.highlightedNodes,i=e.displayedNodeLabels,o=[];return t.forEachEdge((function(e,t,a,s){(a===r||s===r||n.has(a)||n.has(s)||i.has(a)&&i.has(s))&&o.push(e)})),o}},461:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.rectangleCollidesWithQuad=t.squareCollidesWithQuad=t.getCircumscribedAlignedRectangle=t.isRectangleAligned=void 0;var i=n(r(796)),o=!1;function a(e){return e.x1===e.x2||e.y1===e.y2}function s(e){var t=Math.sqrt(Math.pow(e.x2-e.x1,2)+Math.pow(e.y2-e.y1,2)),r=(e.y1-e.y2)*e.height/t,n=(e.x2-e.x1)*e.height/t,i={x:e.x1,y:e.y1},o={x:e.x2,y:e.y2},a={x:e.x1+r,y:e.y1+n},s={x:e.x2+r,y:e.y2+n},c=Math.min(i.x,o.x,a.x,s.x),u=Math.max(i.x,o.x,a.x,s.x),h=Math.min(i.y,o.y,a.y,s.y);return{x1:c,y1:h,x2:u,y2:h,height:Math.max(i.y,o.y,a.y,s.y)-h}}function c(e,t,r,n,i,o,a){return e<n+o&&e+r>n&&t<i+a&&t+r>i}function u(e,t,r,n,i,o,a,s){return e<i+a&&e+r>i&&t<o+s&&t+n>o}function h(e,t,r,n,i,o){var a=e<r+i/2;return t<n+o/2?a?1:2:a?3:4}t.isRectangleAligned=a,t.getCircumscribedAlignedRectangle=s,t.squareCollidesWithQuad=c,t.rectangleCollidesWithQuad=u;var d=function(){function e(e){var t;void 0===e&&(e={}),this.containers=((t={})[5460]=[],t),this.cache=null,this.lastRectangle=null;var r=Math.pow(4,5);this.data=new Float32Array((4*r-1)/3*4),e.boundaries?this.resize(e.boundaries):this.resize({x:0,y:0,width:1,height:1})}return e.prototype.add=function(e,t,r,n){return function(e,t,r,n,i,a,s){for(var u=i-s,h=a-s,d=2*s,l=0,p=0;;){if(l>=5)return r[p]=r[p]||[],void r[p].push(n);var f=4*p+4,g=4*p+8,y=4*p+12,v=4*p+16,m=c(u,h,d,t[f+0],t[f+1],t[f+2],t[f+3]),b=c(u,h,d,t[g+0],t[g+1],t[g+2],t[g+3]),w=c(u,h,d,t[y+0],t[y+1],t[y+2],t[y+3]),_=c(u,h,d,t[v+0],t[v+1],t[v+2],t[v+3]),x=[m,b,w,_].reduce((function(e,t){return t?e+1:e}),0);if(0===x&&0===l)return r[5460].push(n),void(!o&&r[5460].length>=5&&(o=!0,console.warn("sigma/quadtree.insertNode: At least 5 nodes are outside the global quadtree zone. You might have a problem with the normalization function or the custom bounding box.")));if(0===x)throw new Error("sigma/quadtree.insertNode: no collision (level: ".concat(l,", key: ").concat(n,", x: ").concat(i,", y: ").concat(a,", size: ").concat(s,")."));if(3===x)throw new Error("sigma/quadtree.insertNode: 3 impossible collisions (level: ".concat(l,", key: ").concat(n,", x: ").concat(i,", y: ").concat(a,", size: ").concat(s,")."));if(x>1)return r[p]=r[p]||[],void r[p].push(n);l++,m&&(p=f),b&&(p=g),w&&(p=y),_&&(p=v)}}(0,this.data,this.containers,e,t,r,n),this},e.prototype.resize=function(e){this.clear(),this.data[0]=e.x,this.data[1]=e.y,this.data[2]=e.width,this.data[3]=e.height,function(e,t){for(var r=[0,0];r.length;){var n=r.pop(),i=r.pop(),o=4*i+4,a=4*i+8,s=4*i+12,c=4*i+16,u=t[i+0],h=t[i+1],d=t[i+2]/2,l=t[i+3]/2;t[o+0]=u,t[o+1]=h,t[o+2]=d,t[o+3]=l,t[a+0]=u+d,t[a+1]=h,t[a+2]=d,t[a+3]=l,t[s+0]=u,t[s+1]=h+l,t[s+2]=d,t[s+3]=l,t[c+0]=u+d,t[c+1]=h+l,t[c+2]=d,t[c+3]=l,n<4&&(r.push(c,n+1),r.push(s,n+1),r.push(a,n+1),r.push(o,n+1))}}(0,this.data)},e.prototype.clear=function(){var e;return this.containers=((e={})[5460]=[],e),this},e.prototype.point=function(e,t){var r=this.containers[5460].slice(),n=0,o=0;do{this.containers[n]&&(0,i.default)(r,this.containers[n]),n=4*n+4*h(e,t,this.data[n+0],this.data[n+1],this.data[n+2],this.data[n+3]),o++}while(o<=5);return r},e.prototype.rectangle=function(e,t,r,n,o){var c=this.lastRectangle;return c&&e===c.x1&&r===c.x2&&t===c.y1&&n===c.y2&&o===c.height||(this.lastRectangle={x1:e,y1:t,x2:r,y2:n,height:o},a(this.lastRectangle)||(this.lastRectangle=s(this.lastRectangle)),this.cache=function(e,t,r,n,o,a,s){for(var c,h=[0,0],d=[];h.length;){var l=h.pop(),p=h.pop();if((c=r[p])&&(0,i.default)(d,c),!(l>=5)){var f=4*p+4,g=4*p+8,y=4*p+12,v=4*p+16,m=u(n,o,a,s,t[f+0],t[f+1],t[f+2],t[f+3]),b=u(n,o,a,s,t[g+0],t[g+1],t[g+2],t[g+3]),w=u(n,o,a,s,t[y+0],t[y+1],t[y+2],t[y+3]),_=u(n,o,a,s,t[v+0],t[v+1],t[v+2],t[v+3]);m&&h.push(f,l+1),b&&h.push(g,l+1),w&&h.push(y,l+1),_&&h.push(v,l+1)}}return d}(0,this.data,this.containers,e,t,Math.abs(e-r)||Math.abs(t-n),o),(0,i.default)(this.cache,this.containers[5460])),this.cache},e}();t.default=d},26:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Sigma=t.MouseCaptor=t.QuadTree=t.Camera=void 0;var i=n(r(248));t.Sigma=i.default;var o=n(r(554));t.Camera=o.default;var a=n(r(461));t.QuadTree=a.default;var s=n(r(886));t.MouseCaptor=s.default,t.default=i.default},294:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r,n,i){var o=i.edgeLabelSize,a=i.edgeLabelFont,s=i.edgeLabelWeight,c=i.edgeLabelColor.attribute?t[i.edgeLabelColor.attribute]||i.edgeLabelColor.color||"#000":i.edgeLabelColor.color,u=t.label;if(u){e.fillStyle=c,e.font="".concat(s," ").concat(o,"px ").concat(a);var h,d,l=r.size,p=n.size,f=r.x,g=r.y,y=n.x,v=n.y,m=y-f,b=v-g,w=Math.sqrt(m*m+b*b);if(!(w<l+p)){h=((f+=m*l/w)+(y-=m*p/w))/2,d=((g+=b*l/w)+(v-=b*p/w))/2,m=y-f,b=v-g,w=Math.sqrt(m*m+b*b);var _,x=e.measureText(u).width;if(x>w){for(u+="…",x=e.measureText(u).width;x>w&&u.length>1;)u=u.slice(0,-2)+"…",x=e.measureText(u).width;if(u.length<4)return}_=m>0?b>0?Math.acos(m/w):Math.asin(b/w):b>0?Math.acos(m/w)+Math.PI:Math.asin(m/w)+Math.PI/2,e.save(),e.translate(h,d),e.rotate(_),e.fillText(u,-x/2,t.size/2+o),e.restore()}}}},607:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(577));t.default=function(e,t,r){var n=r.labelSize,o=r.labelFont,a=r.labelWeight;if(e.font="".concat(a," ").concat(n,"px ").concat(o),e.fillStyle="#FFF",e.shadowOffsetX=0,e.shadowOffsetY=0,e.shadowBlur=8,e.shadowColor="#000","string"==typeof t.label){var s=e.measureText(t.label).width,c=Math.round(s+5),u=Math.round(n+4),h=Math.max(t.size,n/2)+2,d=Math.asin(u/2/h),l=Math.sqrt(Math.abs(Math.pow(h,2)-Math.pow(u/2,2)));e.beginPath(),e.moveTo(t.x+l,t.y+u/2),e.lineTo(t.x+h+c,t.y+u/2),e.lineTo(t.x+h+c,t.y-u/2),e.lineTo(t.x+l,t.y-u/2),e.arc(t.x,t.y,h,d,-d),e.closePath(),e.fill()}else e.beginPath(),e.arc(t.x,t.y,t.size+2,0,2*Math.PI),e.closePath(),e.fill();e.shadowOffsetX=0,e.shadowOffsetY=0,e.shadowBlur=0,(0,i.default)(e,t,r)}},577:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){if(t.label){var n=r.labelSize,i=r.labelFont,o=r.labelWeight,a=r.labelColor.attribute?t[r.labelColor.attribute]||r.labelColor.color||"#000":r.labelColor.color;e.fillStyle=a,e.font="".concat(o," ").concat(n,"px ").concat(i),e.fillText(t.label,t.x+t.size+3,t.y+n/3)}}},917:function(e,t,r){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.createEdgeCompoundProgram=t.AbstractEdgeProgram=void 0;var o=function(e){function t(t,r,n,i,o){return e.call(this,t,r,n,i,o)||this}return i(t,e),t}(r(973).AbstractProgram);t.AbstractEdgeProgram=o,t.createEdgeCompoundProgram=function(e){return function(){function t(t,r){this.programs=e.map((function(e){return new e(t,r)}))}return t.prototype.bufferData=function(){this.programs.forEach((function(e){return e.bufferData()}))},t.prototype.allocate=function(e){this.programs.forEach((function(t){return t.allocate(e)}))},t.prototype.bind=function(){},t.prototype.computeIndices=function(){this.programs.forEach((function(e){return e.computeIndices()}))},t.prototype.render=function(e){this.programs.forEach((function(t){t.bind(),t.bufferData(),t.render(e)}))},t.prototype.process=function(e,t,r,n,i){this.programs.forEach((function(o){return o.process(e,t,r,n,i)}))},t}()}},533:function(e,t,r){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.createNodeCompoundProgram=t.AbstractNodeProgram=void 0;var o=function(e){function t(t,r,n,i,o){var a=e.call(this,t,r,n,i,o)||this;a.positionLocation=t.getAttribLocation(a.program,"a_position"),a.sizeLocation=t.getAttribLocation(a.program,"a_size"),a.colorLocation=t.getAttribLocation(a.program,"a_color");var s=t.getUniformLocation(a.program,"u_matrix");if(null===s)throw new Error("AbstractNodeProgram: error while getting matrixLocation");a.matrixLocation=s;var c=t.getUniformLocation(a.program,"u_ratio");if(null===c)throw new Error("AbstractNodeProgram: error while getting ratioLocation");a.ratioLocation=c;var u=t.getUniformLocation(a.program,"u_scale");if(null===u)throw new Error("AbstractNodeProgram: error while getting scaleLocation");return a.scaleLocation=u,a}return i(t,e),t.prototype.bind=function(){var e=this.gl;e.enableVertexAttribArray(this.positionLocation),e.enableVertexAttribArray(this.sizeLocation),e.enableVertexAttribArray(this.colorLocation),e.vertexAttribPointer(this.positionLocation,2,e.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,0),e.vertexAttribPointer(this.sizeLocation,1,e.FLOAT,!1,this.attributes*Float32Array.BYTES_PER_ELEMENT,8),e.vertexAttribPointer(this.colorLocation,4,e.UNSIGNED_BYTE,!0,this.attributes*Float32Array.BYTES_PER_ELEMENT,12)},t}(r(973).AbstractProgram);t.AbstractNodeProgram=o,t.createNodeCompoundProgram=function(e){return function(){function t(t,r){this.programs=e.map((function(e){return new e(t,r)}))}return t.prototype.bufferData=function(){this.programs.forEach((function(e){return e.bufferData()}))},t.prototype.allocate=function(e){this.programs.forEach((function(t){return t.allocate(e)}))},t.prototype.bind=function(){},t.prototype.render=function(e){this.programs.forEach((function(t){t.bind(),t.bufferData(),t.render(e)}))},t.prototype.process=function(e,t,r){this.programs.forEach((function(n){return n.process(e,t,r)}))},t}()}},973:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractProgram=void 0;var n=r(538),i=function(){function e(e,t,r,i,o){this.array=new Float32Array,this.points=i,this.attributes=o,this.gl=e,this.vertexShaderSource=t,this.fragmentShaderSource=r;var a=e.createBuffer();if(null===a)throw new Error("AbstractProgram: error while creating the buffer");this.buffer=a,e.bindBuffer(e.ARRAY_BUFFER,this.buffer),this.vertexShader=(0,n.loadVertexShader)(e,this.vertexShaderSource),this.fragmentShader=(0,n.loadFragmentShader)(e,this.fragmentShaderSource),this.program=(0,n.loadProgram)(e,[this.vertexShader,this.fragmentShader])}return e.prototype.bufferData=function(){var e=this.gl;e.bufferData(e.ARRAY_BUFFER,this.array,e.DYNAMIC_DRAW)},e.prototype.allocate=function(e){this.array=new Float32Array(this.points*this.attributes*e)},e.prototype.hasNothingToRender=function(){return 0===this.array.length},e}();t.AbstractProgram=i},638:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(917),o=n(r(747)),a=n(r(874)),s=(0,i.createEdgeCompoundProgram)([a.default,o.default]);t.default=s},747:function(e,t,r){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(524),s=o(r(191)),c=o(r(83)),u=function(e){function t(t){var r=e.call(this,t,s.default,c.default,3,9)||this;r.positionLocation=t.getAttribLocation(r.program,"a_position"),r.colorLocation=t.getAttribLocation(r.program,"a_color"),r.normalLocation=t.getAttribLocation(r.program,"a_normal"),r.radiusLocation=t.getAttribLocation(r.program,"a_radius"),r.barycentricLocation=t.getAttribLocation(r.program,"a_barycentric");var n=t.getUniformLocation(r.program,"u_matrix");if(null===n)throw new Error("EdgeArrowHeadProgram: error while getting matrixLocation");r.matrixLocation=n;var i=t.getUniformLocation(r.program,"u_sqrtZoomRatio");if(null===i)throw new Error("EdgeArrowHeadProgram: error while getting sqrtZoomRatioLocation");r.sqrtZoomRatioLocation=i;var o=t.getUniformLocation(r.program,"u_correctionRatio");if(null===o)throw new Error("EdgeArrowHeadProgram: error while getting correctionRatioLocation");return r.correctionRatioLocation=o,r.bind(),r}return i(t,e),t.prototype.bind=function(){var e=this.gl;e.enableVertexAttribArray(this.positionLocation),e.enableVertexAttribArray(this.normalLocation),e.enableVertexAttribArray(this.radiusLocation),e.enableVertexAttribArray(this.colorLocation),e.enableVertexAttribArray(this.barycentricLocation),e.vertexAttribPointer(this.positionLocation,2,e.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,0),e.vertexAttribPointer(this.normalLocation,2,e.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,8),e.vertexAttribPointer(this.radiusLocation,1,e.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,16),e.vertexAttribPointer(this.colorLocation,4,e.UNSIGNED_BYTE,!0,9*Float32Array.BYTES_PER_ELEMENT,20),e.vertexAttribPointer(this.barycentricLocation,3,e.FLOAT,!1,9*Float32Array.BYTES_PER_ELEMENT,24)},t.prototype.computeIndices=function(){},t.prototype.process=function(e,t,r,n,i){if(n)for(var o=27*i,s=o+27;o<s;o++)this.array[o]=0;else{var c=r.size||1,u=t.size||1,h=e.x,d=e.y,l=t.x,p=t.y,f=(0,a.floatColor)(r.color),g=l-h,y=p-d,v=g*g+y*y,m=0,b=0;v&&(m=-y*(v=1/Math.sqrt(v))*c,b=g*v*c);var w=27*i,_=this.array;_[w++]=l,_[w++]=p,_[w++]=-m,_[w++]=-b,_[w++]=u,_[w++]=f,_[w++]=1,_[w++]=0,_[w++]=0,_[w++]=l,_[w++]=p,_[w++]=-m,_[w++]=-b,_[w++]=u,_[w++]=f,_[w++]=0,_[w++]=1,_[w++]=0,_[w++]=l,_[w++]=p,_[w++]=-m,_[w++]=-b,_[w++]=u,_[w++]=f,_[w++]=0,_[w++]=0,_[w]=1}},t.prototype.render=function(e){if(!this.hasNothingToRender()){var t=this.gl,r=this.program;t.useProgram(r),t.uniformMatrix3fv(this.matrixLocation,!1,e.matrix),t.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(e.ratio)),t.uniform1f(this.correctionRatioLocation,e.correctionRatio),t.drawArrays(t.TRIANGLES,0,this.array.length/9)}},t}(r(917).AbstractEdgeProgram);t.default=u},874:function(e,t,r){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(917),s=r(524),c=o(r(73)),u=o(r(879)),h=function(e){function t(t){var r=e.call(this,t,c.default,u.default,4,6)||this,n=t.createBuffer();if(null===n)throw new Error("EdgeClampedProgram: error while getting resolutionLocation");r.indicesBuffer=n,r.positionLocation=t.getAttribLocation(r.program,"a_position"),r.colorLocation=t.getAttribLocation(r.program,"a_color"),r.normalLocation=t.getAttribLocation(r.program,"a_normal"),r.radiusLocation=t.getAttribLocation(r.program,"a_radius");var i=t.getUniformLocation(r.program,"u_matrix");if(null===i)throw new Error("EdgeClampedProgram: error while getting matrixLocation");r.matrixLocation=i;var o=t.getUniformLocation(r.program,"u_sqrtZoomRatio");if(null===o)throw new Error("EdgeClampedProgram: error while getting cameraRatioLocation");r.sqrtZoomRatioLocation=o;var a=t.getUniformLocation(r.program,"u_correctionRatio");if(null===a)throw new Error("EdgeClampedProgram: error while getting viewportRatioLocation");return r.correctionRatioLocation=a,r.canUse32BitsIndices=(0,s.canUse32BitsIndices)(t),r.IndicesArray=r.canUse32BitsIndices?Uint32Array:Uint16Array,r.indicesArray=new r.IndicesArray,r.indicesType=r.canUse32BitsIndices?t.UNSIGNED_INT:t.UNSIGNED_SHORT,r.bind(),r}return i(t,e),t.prototype.bind=function(){var e=this.gl;e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indicesBuffer),e.enableVertexAttribArray(this.positionLocation),e.enableVertexAttribArray(this.normalLocation),e.enableVertexAttribArray(this.colorLocation),e.enableVertexAttribArray(this.radiusLocation),e.vertexAttribPointer(this.positionLocation,2,e.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,0),e.vertexAttribPointer(this.normalLocation,2,e.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,8),e.vertexAttribPointer(this.colorLocation,4,e.UNSIGNED_BYTE,!0,6*Float32Array.BYTES_PER_ELEMENT,16),e.vertexAttribPointer(this.radiusLocation,1,e.FLOAT,!1,6*Float32Array.BYTES_PER_ELEMENT,20)},t.prototype.process=function(e,t,r,n,i){if(n)for(var o=24*i,a=o+24;o<a;o++)this.array[o]=0;else{var c=r.size||1,u=e.x,h=e.y,d=t.x,l=t.y,p=t.size||1,f=(0,s.floatColor)(r.color),g=d-u,y=l-h,v=g*g+y*y,m=0,b=0;v&&(m=-y*(v=1/Math.sqrt(v))*c,b=g*v*c);var w=24*i,_=this.array;_[w++]=u,_[w++]=h,_[w++]=m,_[w++]=b,_[w++]=f,_[w++]=0,_[w++]=u,_[w++]=h,_[w++]=-m,_[w++]=-b,_[w++]=f,_[w++]=0,_[w++]=d,_[w++]=l,_[w++]=m,_[w++]=b,_[w++]=f,_[w++]=p,_[w++]=d,_[w++]=l,_[w++]=-m,_[w++]=-b,_[w++]=f,_[w]=-p}},t.prototype.computeIndices=function(){for(var e=this.array.length/6,t=e+e/2,r=new this.IndicesArray(t),n=0,i=0;n<e;n+=4)r[i++]=n,r[i++]=n+1,r[i++]=n+2,r[i++]=n+2,r[i++]=n+1,r[i++]=n+3;this.indicesArray=r},t.prototype.bufferData=function(){e.prototype.bufferData.call(this);var t=this.gl;t.bufferData(t.ELEMENT_ARRAY_BUFFER,this.indicesArray,t.STATIC_DRAW)},t.prototype.render=function(e){if(!this.hasNothingToRender()){var t=this.gl,r=this.program;t.useProgram(r),t.uniformMatrix3fv(this.matrixLocation,!1,e.matrix),t.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(e.ratio)),t.uniform1f(this.correctionRatioLocation,e.correctionRatio),t.drawElements(t.TRIANGLES,this.indicesArray.length,this.indicesType,0)}},t}(a.AbstractEdgeProgram);t.default=h},857:function(e,t,r){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(524),s=o(r(372)),c=o(r(879)),u=function(e){function t(t){var r=e.call(this,t,s.default,c.default,4,5)||this,n=t.createBuffer();if(null===n)throw new Error("EdgeProgram: error while creating indicesBuffer");r.indicesBuffer=n,r.positionLocation=t.getAttribLocation(r.program,"a_position"),r.colorLocation=t.getAttribLocation(r.program,"a_color"),r.normalLocation=t.getAttribLocation(r.program,"a_normal");var i=t.getUniformLocation(r.program,"u_matrix");if(null===i)throw new Error("EdgeProgram: error while getting matrixLocation");r.matrixLocation=i;var o=t.getUniformLocation(r.program,"u_correctionRatio");if(null===o)throw new Error("EdgeProgram: error while getting correctionRatioLocation");r.correctionRatioLocation=o;var u=t.getUniformLocation(r.program,"u_sqrtZoomRatio");if(null===u)throw new Error("EdgeProgram: error while getting sqrtZoomRatioLocation");return r.sqrtZoomRatioLocation=u,r.canUse32BitsIndices=(0,a.canUse32BitsIndices)(t),r.IndicesArray=r.canUse32BitsIndices?Uint32Array:Uint16Array,r.indicesArray=new r.IndicesArray,r.indicesType=r.canUse32BitsIndices?t.UNSIGNED_INT:t.UNSIGNED_SHORT,r.bind(),r}return i(t,e),t.prototype.bind=function(){var e=this.gl;e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indicesBuffer),e.enableVertexAttribArray(this.positionLocation),e.enableVertexAttribArray(this.normalLocation),e.enableVertexAttribArray(this.colorLocation),e.vertexAttribPointer(this.positionLocation,2,e.FLOAT,!1,5*Float32Array.BYTES_PER_ELEMENT,0),e.vertexAttribPointer(this.normalLocation,2,e.FLOAT,!1,5*Float32Array.BYTES_PER_ELEMENT,8),e.vertexAttribPointer(this.colorLocation,4,e.UNSIGNED_BYTE,!0,5*Float32Array.BYTES_PER_ELEMENT,16)},t.prototype.computeIndices=function(){for(var e=this.array.length/5,t=e+e/2,r=new this.IndicesArray(t),n=0,i=0;n<e;n+=4)r[i++]=n,r[i++]=n+1,r[i++]=n+2,r[i++]=n+2,r[i++]=n+1,r[i++]=n+3;this.indicesArray=r},t.prototype.bufferData=function(){e.prototype.bufferData.call(this);var t=this.gl;t.bufferData(t.ELEMENT_ARRAY_BUFFER,this.indicesArray,t.STATIC_DRAW)},t.prototype.process=function(e,t,r,n,i){if(n)for(var o=20*i,s=o+20;o<s;o++)this.array[o]=0;else{var c=r.size||1,u=e.x,h=e.y,d=t.x,l=t.y,p=(0,a.floatColor)(r.color),f=d-u,g=l-h,y=f*f+g*g,v=0,m=0;y&&(v=-g*(y=1/Math.sqrt(y))*c,m=f*y*c);var b=20*i,w=this.array;w[b++]=u,w[b++]=h,w[b++]=v,w[b++]=m,w[b++]=p,w[b++]=u,w[b++]=h,w[b++]=-v,w[b++]=-m,w[b++]=p,w[b++]=d,w[b++]=l,w[b++]=v,w[b++]=m,w[b++]=p,w[b++]=d,w[b++]=l,w[b++]=-v,w[b++]=-m,w[b]=p}},t.prototype.render=function(e){if(!this.hasNothingToRender()){var t=this.gl,r=this.program;t.useProgram(r),t.uniformMatrix3fv(this.matrixLocation,!1,e.matrix),t.uniform1f(this.sqrtZoomRatioLocation,Math.sqrt(e.ratio)),t.uniform1f(this.correctionRatioLocation,e.correctionRatio),t.drawElements(t.TRIANGLES,this.indicesArray.length,this.indicesType,0)}},t}(r(917).AbstractEdgeProgram);t.default=u},37:function(e,t,r){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(524),s=o(r(146)),c=o(r(546)),u=function(e){function t(t){var r=e.call(this,t,s.default,c.default,1,4)||this;return r.bind(),r}return i(t,e),t.prototype.process=function(e,t,r){var n=this.array,i=1*r*4;if(t)return n[i++]=0,n[i++]=0,n[i++]=0,void(n[i++]=0);var o=(0,a.floatColor)(e.color);n[i++]=e.x,n[i++]=e.y,n[i++]=e.size,n[i]=o},t.prototype.render=function(e){if(!this.hasNothingToRender()){var t=this.gl,r=this.program;t.useProgram(r),t.uniform1f(this.ratioLocation,1/Math.sqrt(e.ratio)),t.uniform1f(this.scaleLocation,e.scalingRatio),t.uniformMatrix3fv(this.matrixLocation,!1,e.matrix),t.drawArrays(t.POINTS,0,this.array.length/4)}},t}(r(533).AbstractNodeProgram);t.default=u},83:e=>{(()=>{"use strict";var t={d:(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},r={};t.r(r),t.d(r,{default:()=>n});const n="precision mediump float;\n\nvarying vec4 v_color;\n\nvoid main(void) {\n  gl_FragColor = v_color;\n}\n";e.exports=r})()},191:e=>{(()=>{"use strict";var t={d:(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},r={};t.r(r),t.d(r,{default:()=>n});const n="attribute vec2 a_position;\nattribute vec2 a_normal;\nattribute float a_radius;\nattribute vec4 a_color;\nattribute vec3 a_barycentric;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\nconst float arrowHeadWidthLengthRatio = 0.66;\nconst float arrowHeadLengthThicknessRatio = 2.5;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // These first computations are taken from edge.vert.glsl and\n  // edge.clamped.vert.glsl. Please read it to get better comments on what's\n  // happening:\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n  float adaptedWebGLNodeRadius = a_radius * 2.0 * u_correctionRatio * u_sqrtZoomRatio;\n  float adaptedWebGLArrowHeadLength = adaptedWebGLThickness * 2.0 * arrowHeadLengthThicknessRatio;\n  float adaptedWebGLArrowHeadHalfWidth = adaptedWebGLArrowHeadLength * arrowHeadWidthLengthRatio / 2.0;\n\n  float da = a_barycentric.x;\n  float db = a_barycentric.y;\n  float dc = a_barycentric.z;\n\n  vec2 delta = vec2(\n      da * (adaptedWebGLNodeRadius * unitNormal.y)\n    + db * ((adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.y + adaptedWebGLArrowHeadHalfWidth * unitNormal.x)\n    + dc * ((adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.y - adaptedWebGLArrowHeadHalfWidth * unitNormal.x),\n\n      da * (-adaptedWebGLNodeRadius * unitNormal.x)\n    + db * (-(adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.x + adaptedWebGLArrowHeadHalfWidth * unitNormal.y)\n    + dc * (-(adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength) * unitNormal.x - adaptedWebGLArrowHeadHalfWidth * unitNormal.y)\n  );\n\n  vec2 position = (u_matrix * vec3(a_position + delta, 1)).xy;\n\n  gl_Position = vec4(position, 0, 1);\n\n  // Extract the color:\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";e.exports=r})()},73:e=>{(()=>{"use strict";var t={d:(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},r={};t.r(r),t.d(r,{default:()=>n});const n="attribute vec4 a_color;\nattribute vec2 a_normal;\nattribute vec2 a_position;\nattribute float a_radius;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\nconst float arrowHeadLengthThicknessRatio = 2.5;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // These first computations are taken from edge.vert.glsl. Please read it to\n  // get better comments on what's happening:\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n\n  // Here, we move the point to leave space for the arrow head:\n  float direction = sign(a_radius);\n  float adaptedWebGLNodeRadius = direction * a_radius * 2.0 * u_correctionRatio * u_sqrtZoomRatio;\n  float adaptedWebGLArrowHeadLength = adaptedWebGLThickness * 2.0 * arrowHeadLengthThicknessRatio;\n\n  vec2 compensationVector = vec2(-direction * unitNormal.y, direction * unitNormal.x) * (adaptedWebGLNodeRadius + adaptedWebGLArrowHeadLength);\n\n  // Here is the proper position of the vertex\n  gl_Position = vec4((u_matrix * vec3(a_position + unitNormal * adaptedWebGLThickness + compensationVector, 1)).xy, 0, 1);\n\n  v_thickness = webGLThickness / u_sqrtZoomRatio;\n\n  v_normal = unitNormal;\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";e.exports=r})()},879:e=>{(()=>{"use strict";var t={d:(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},r={};t.r(r),t.d(r,{default:()=>n});const n="precision mediump float;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float feather = 0.001;\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\nvoid main(void) {\n  float dist = length(v_normal) * v_thickness;\n\n  float t = smoothstep(\n    v_thickness - feather,\n    v_thickness,\n    dist\n  );\n\n  gl_FragColor = mix(v_color, transparent, t);\n}\n";e.exports=r})()},372:e=>{(()=>{"use strict";var t={d:(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},r={};t.r(r),t.d(r,{default:()=>n});const n='attribute vec4 a_color;\nattribute vec2 a_normal;\nattribute vec2 a_position;\n\nuniform mat3 u_matrix;\nuniform float u_sqrtZoomRatio;\nuniform float u_correctionRatio;\n\nvarying vec4 v_color;\nvarying vec2 v_normal;\nvarying float v_thickness;\n\nconst float minThickness = 1.7;\nconst float bias = 255.0 / 254.0;\n\nvoid main() {\n  float normalLength = length(a_normal);\n  vec2 unitNormal = a_normal / normalLength;\n\n  // We require edges to be at least `minThickness` pixels thick *on screen*\n  // (so we need to compensate the SQRT zoom ratio):\n  float pixelsThickness = max(normalLength, minThickness * u_sqrtZoomRatio);\n\n  // Then, we need to retrieve the normalized thickness of the edge in the WebGL\n  // referential (in a ([0, 1], [0, 1]) space), using our "magic" correction\n  // ratio:\n  float webGLThickness = pixelsThickness * u_correctionRatio;\n\n  // Finally, we adapt the edge thickness to the "SQRT rule" in sigma (so that\n  // items are not too big when zoomed in, and not too small when zoomed out).\n  // The exact computation should be `adapted = value * zoom / sqrt(zoom)`, but\n  // it\'s simpler like this:\n  float adaptedWebGLThickness = webGLThickness * u_sqrtZoomRatio;\n\n  // Here is the proper position of the vertex\n  gl_Position = vec4((u_matrix * vec3(a_position + unitNormal * adaptedWebGLThickness, 1)).xy, 0, 1);\n\n  // For the fragment shader though, we need a thickness that takes the "magic"\n  // correction ratio into account (as in webGLThickness), but so that the\n  // antialiasing effect does not depend on the zoom level. So here\'s yet\n  // another thickness version:\n  v_thickness = webGLThickness / u_sqrtZoomRatio;\n\n  v_normal = unitNormal;\n  v_color = a_color;\n  v_color.a *= bias;\n}\n';e.exports=r})()},546:e=>{(()=>{"use strict";var t={d:(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},r={};t.r(r),t.d(r,{default:()=>n});const n="precision mediump float;\n\nvarying vec4 v_color;\nvarying float v_border;\n\nconst float radius = 0.5;\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\n\nvoid main(void) {\n  vec2 m = gl_PointCoord - vec2(0.5, 0.5);\n  float dist = radius - length(m);\n\n  float t = 0.0;\n  if (dist > v_border)\n    t = 1.0;\n  else if (dist > 0.0)\n    t = dist / v_border;\n\n  gl_FragColor = mix(transparent, v_color, t);\n}\n";e.exports=r})()},146:e=>{(()=>{"use strict";var t={d:(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},r={};t.r(r),t.d(r,{default:()=>n});const n="attribute vec2 a_position;\nattribute float a_size;\nattribute vec4 a_color;\n\nuniform float u_ratio;\nuniform float u_scale;\nuniform mat3 u_matrix;\n\nvarying vec4 v_color;\nvarying float v_border;\n\nconst float bias = 255.0 / 254.0;\n\nvoid main() {\n  gl_Position = vec4(\n    (u_matrix * vec3(a_position, 1)).xy,\n    0,\n    1\n  );\n\n  // Multiply the point size twice:\n  //  - x SCALING_RATIO to correct the canvas scaling\n  //  - x 2 to correct the formulae\n  gl_PointSize = a_size * u_ratio * u_scale * 2.0;\n\n  v_border = (1.0 / u_ratio) * (0.5 / a_size);\n\n  // Extract the color:\n  v_color = a_color;\n  v_color.a *= bias;\n}\n";e.exports=r})()},538:(e,t)=>{"use strict";function r(e,t,r){var n="VERTEX"===e?t.VERTEX_SHADER:t.FRAGMENT_SHADER,i=t.createShader(n);if(null===i)throw new Error("loadShader: error while creating the shader");if(t.shaderSource(i,r),t.compileShader(i),!t.getShaderParameter(i,t.COMPILE_STATUS)){var o=t.getShaderInfoLog(i);throw t.deleteShader(i),new Error("loadShader: error while compiling the shader:\n".concat(o,"\n").concat(r))}return i}Object.defineProperty(t,"__esModule",{value:!0}),t.loadProgram=t.loadFragmentShader=t.loadVertexShader=void 0,t.loadVertexShader=function(e,t){return r("VERTEX",e,t)},t.loadFragmentShader=function(e,t){return r("FRAGMENT",e,t)},t.loadProgram=function(e,t){var r,n,i=e.createProgram();if(null===i)throw new Error("loadProgram: error while creating the program.");for(r=0,n=t.length;r<n;r++)e.attachShader(i,t[r]);if(e.linkProgram(i),!e.getProgramParameter(i,e.LINK_STATUS))throw e.deleteProgram(i),new Error("loadProgram: error while linking the program.");return i}},482:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.resolveSettings=t.validateSettings=t.DEFAULT_EDGE_PROGRAM_CLASSES=t.DEFAULT_NODE_PROGRAM_CLASSES=t.DEFAULT_SETTINGS=void 0;var i=r(524),o=n(r(577)),a=n(r(607)),s=n(r(294)),c=n(r(37)),u=n(r(857)),h=n(r(638));t.DEFAULT_SETTINGS={hideEdgesOnMove:!1,hideLabelsOnMove:!1,renderLabels:!0,renderEdgeLabels:!1,enableEdgeClickEvents:!1,enableEdgeWheelEvents:!1,enableEdgeHoverEvents:!1,defaultNodeColor:"#999",defaultNodeType:"circle",defaultEdgeColor:"#ccc",defaultEdgeType:"line",labelFont:"Arial",labelSize:14,labelWeight:"normal",labelColor:{color:"#000"},edgeLabelFont:"Arial",edgeLabelSize:14,edgeLabelWeight:"normal",edgeLabelColor:{attribute:"color"},stagePadding:30,labelDensity:1,labelGridCellSize:100,labelRenderedSizeThreshold:6,nodeReducer:null,edgeReducer:null,zIndex:!1,minCameraRatio:null,maxCameraRatio:null,labelRenderer:o.default,hoverRenderer:a.default,edgeLabelRenderer:s.default,allowInvalidContainer:!1,nodeProgramClasses:{},nodeHoverProgramClasses:{},edgeProgramClasses:{}},t.DEFAULT_NODE_PROGRAM_CLASSES={circle:c.default},t.DEFAULT_EDGE_PROGRAM_CLASSES={arrow:h.default,line:u.default},t.validateSettings=function(e){if("number"!=typeof e.labelDensity||e.labelDensity<0)throw new Error("Settings: invalid `labelDensity`. Expecting a positive number.");var t=e.minCameraRatio,r=e.maxCameraRatio;if("number"==typeof t&&"number"==typeof r&&r<t)throw new Error("Settings: invalid camera ratio boundaries. Expecting `maxCameraRatio` to be greater than `minCameraRatio`.")},t.resolveSettings=function(e){var r=(0,i.assign)({},t.DEFAULT_SETTINGS,e);return r.nodeProgramClasses=(0,i.assign)({},t.DEFAULT_NODE_PROGRAM_CLASSES,r.nodeProgramClasses),r.edgeProgramClasses=(0,i.assign)({},t.DEFAULT_EDGE_PROGRAM_CLASSES,r.edgeProgramClasses),r}},248:function(e,t,r){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var c=s(r(796)),u=s(r(554)),h=s(r(886)),d=s(r(461)),l=r(291),p=r(524),f=r(98),g=r(482),y=s(r(311)),v=r(132),m=r(822);function b(e,t,r){if(!r.hasOwnProperty("x")||!r.hasOwnProperty("y"))throw new Error('Sigma: could not find a valid position (x, y) for node "'.concat(t,'". All your nodes must have a number "x" and "y". Maybe your forgot to apply a layout or your "nodeReducer" is not returning the correct data?'));return r.color||(r.color=e.defaultNodeColor),r.label||""===r.label||(r.label=null),void 0!==r.label&&null!==r.label?r.label=""+r.label:r.label=null,r.size||(r.size=2),r.hasOwnProperty("hidden")||(r.hidden=!1),r.hasOwnProperty("highlighted")||(r.highlighted=!1),r.hasOwnProperty("forceLabel")||(r.forceLabel=!1),r.type&&""!==r.type||(r.type=e.defaultNodeType),r.zIndex||(r.zIndex=0),r}function w(e,t,r){return r.color||(r.color=e.defaultEdgeColor),r.label||(r.label=""),r.size||(r.size=.5),r.hasOwnProperty("hidden")||(r.hidden=!1),r.hasOwnProperty("forceLabel")||(r.forceLabel=!1),r.type&&""!==r.type||(r.type=e.defaultEdgeType),r.zIndex||(r.zIndex=0),r}var _=function(e){function t(t,r,n){void 0===n&&(n={});var i=e.call(this)||this;if(i.elements={},i.canvasContexts={},i.webGLContexts={},i.activeListeners={},i.quadtree=new d.default,i.labelGrid=new f.LabelGrid,i.nodeDataCache={},i.edgeDataCache={},i.nodesWithForcedLabels=[],i.edgesWithForcedLabels=[],i.nodeExtent={x:[0,1],y:[0,1]},i.matrix=(0,v.identity)(),i.invMatrix=(0,v.identity)(),i.correctionRatio=1,i.customBBox=null,i.normalizationFunction=(0,p.createNormalizationFunction)({x:[0,1],y:[0,1]}),i.cameraSizeRatio=1,i.width=0,i.height=0,i.pixelRatio=(0,p.getPixelRatio)(),i.displayedLabels=new Set,i.highlightedNodes=new Set,i.hoveredNode=null,i.hoveredEdge=null,i.renderFrame=null,i.renderHighlightedNodesFrame=null,i.needToProcess=!1,i.needToSoftProcess=!1,i.checkEdgesEventsFrame=null,i.nodePrograms={},i.nodeHoverPrograms={},i.edgePrograms={},i.settings=(0,g.resolveSettings)(n),(0,g.validateSettings)(i.settings),(0,p.validateGraph)(t),!(r instanceof HTMLElement))throw new Error("Sigma: container should be an html element.");for(var o in i.graph=t,i.container=r,i.createWebGLContext("edges",{preserveDrawingBuffer:!0}),i.createCanvasContext("edgeLabels"),i.createWebGLContext("nodes"),i.createCanvasContext("labels"),i.createCanvasContext("hovers"),i.createWebGLContext("hoverNodes"),i.createCanvasContext("mouse"),i.webGLContexts){var a=i.webGLContexts[o];a.blendFunc(a.ONE,a.ONE_MINUS_SRC_ALPHA),a.enable(a.BLEND)}for(var s in i.settings.nodeProgramClasses){var c=i.settings.nodeProgramClasses[s];i.nodePrograms[s]=new c(i.webGLContexts.nodes,i);var l=c;s in i.settings.nodeHoverProgramClasses&&(l=i.settings.nodeHoverProgramClasses[s]),i.nodeHoverPrograms[s]=new l(i.webGLContexts.hoverNodes,i)}for(var s in i.settings.edgeProgramClasses){var m=i.settings.edgeProgramClasses[s];i.edgePrograms[s]=new m(i.webGLContexts.edges,i)}return i.resize(),i.camera=new u.default,i.bindCameraHandlers(),i.mouseCaptor=new h.default(i.elements.mouse,i),i.touchCaptor=new y.default(i.elements.mouse,i),i.bindEventHandlers(),i.bindGraphHandlers(),i.handleSettingsUpdate(),i.process(),i.render(),i}return i(t,e),t.prototype.createCanvas=function(e){var t=(0,p.createElement)("canvas",{position:"absolute"},{class:"sigma-".concat(e)});return this.elements[e]=t,this.container.appendChild(t),t},t.prototype.createCanvasContext=function(e){var t=this.createCanvas(e);return this.canvasContexts[e]=t.getContext("2d",{preserveDrawingBuffer:!1,antialias:!1}),this},t.prototype.createWebGLContext=function(e,t){var r,n=this.createCanvas(e),i=o({preserveDrawingBuffer:!1,antialias:!1},t||{});return(r=n.getContext("webgl2",i))||(r=n.getContext("webgl",i)),r||(r=n.getContext("experimental-webgl",i)),this.webGLContexts[e]=r,this},t.prototype.bindCameraHandlers=function(){var e=this;return this.activeListeners.camera=function(){e._scheduleRefresh()},this.camera.on("updated",this.activeListeners.camera),this},t.prototype.mouseIsOnNode=function(e,t,r){var n=e.x,i=e.y,o=t.x,a=t.y;return n>o-r&&n<o+r&&i>a-r&&i<a+r&&Math.sqrt(Math.pow(n-o,2)+Math.pow(i-a,2))<r},t.prototype.getQuadNodes=function(e){var t=this.viewportToFramedGraph(e);return this.quadtree.point(t.x,1-t.y)},t.prototype.getNodeAtPosition=function(e){for(var t=e.x,r=e.y,n=this.getQuadNodes(e),i=1/0,o=null,a=0,s=n.length;a<s;a++){var c=n[a],u=this.nodeDataCache[c],h=this.framedGraphToViewport(u),d=this.scaleSize(u.size);if(!u.hidden&&this.mouseIsOnNode(e,h,d)){var l=Math.sqrt(Math.pow(t-h.x,2)+Math.pow(r-h.y,2));l<i&&(i=l,o=c)}}return o},t.prototype.bindEventHandlers=function(){var e=this;this.activeListeners.handleResize=function(){e.needToSoftProcess=!0,e._scheduleRefresh()},window.addEventListener("resize",this.activeListeners.handleResize),this.activeListeners.handleMove=function(t){var r={event:t,preventSigmaDefault:function(){t.preventSigmaDefault()}},n=e.getNodeAtPosition(t);if(n&&e.hoveredNode!==n&&!e.nodeDataCache[n].hidden)return e.hoveredNode&&e.emit("leaveNode",o(o({},r),{node:e.hoveredNode})),e.hoveredNode=n,e.emit("enterNode",o(o({},r),{node:n})),void e.scheduleHighlightedNodesRender();if(e.hoveredNode){var i=e.nodeDataCache[e.hoveredNode],a=e.framedGraphToViewport(i),s=e.scaleSize(i.size);if(!e.mouseIsOnNode(t,a,s)){var c=e.hoveredNode;return e.hoveredNode=null,e.emit("leaveNode",o(o({},r),{node:c})),void e.scheduleHighlightedNodesRender()}}!0===e.settings.enableEdgeHoverEvents?e.checkEdgeHoverEvents(r):"debounce"===e.settings.enableEdgeHoverEvents&&(e.checkEdgesEventsFrame||(e.checkEdgesEventsFrame=(0,p.requestFrame)((function(){e.checkEdgeHoverEvents(r),e.checkEdgesEventsFrame=null}))))};var t=function(t){return function(r){var n={event:r,preventSigmaDefault:function(){r.preventSigmaDefault()}},i=r.original.isFakeSigmaMouseEvent?e.getNodeAtPosition(r):e.hoveredNode;if(i)return e.emit("".concat(t,"Node"),o(o({},n),{node:i}));if("wheel"===t?e.settings.enableEdgeWheelEvents:e.settings.enableEdgeClickEvents){var a=e.getEdgeAtPoint(r.x,r.y);if(a)return e.emit("".concat(t,"Edge"),o(o({},n),{edge:a}))}return e.emit("".concat(t,"Stage"),n)}};return this.activeListeners.handleClick=t("click"),this.activeListeners.handleRightClick=t("rightClick"),this.activeListeners.handleDoubleClick=t("doubleClick"),this.activeListeners.handleWheel=t("wheel"),this.activeListeners.handleDown=t("down"),this.mouseCaptor.on("mousemove",this.activeListeners.handleMove),this.mouseCaptor.on("click",this.activeListeners.handleClick),this.mouseCaptor.on("rightClick",this.activeListeners.handleRightClick),this.mouseCaptor.on("doubleClick",this.activeListeners.handleDoubleClick),this.mouseCaptor.on("wheel",this.activeListeners.handleWheel),this.mouseCaptor.on("mousedown",this.activeListeners.handleDown),this},t.prototype.bindGraphHandlers=function(){var e=this,t=this.graph;return this.activeListeners.graphUpdate=function(){e.needToProcess=!0,e._scheduleRefresh()},this.activeListeners.softGraphUpdate=function(){e.needToSoftProcess=!0,e._scheduleRefresh()},this.activeListeners.dropNodeGraphUpdate=function(t){delete e.nodeDataCache[t.key],e.hoveredNode===t.key&&(e.hoveredNode=null),e.activeListeners.graphUpdate()},this.activeListeners.dropEdgeGraphUpdate=function(t){delete e.edgeDataCache[t.key],e.hoveredEdge===t.key&&(e.hoveredEdge=null),e.activeListeners.graphUpdate()},this.activeListeners.clearEdgesGraphUpdate=function(){e.edgeDataCache={},e.hoveredEdge=null,e.activeListeners.graphUpdate()},this.activeListeners.clearGraphUpdate=function(){e.nodeDataCache={},e.hoveredNode=null,e.activeListeners.clearEdgesGraphUpdate()},t.on("nodeAdded",this.activeListeners.graphUpdate),t.on("nodeDropped",this.activeListeners.dropNodeGraphUpdate),t.on("nodeAttributesUpdated",this.activeListeners.softGraphUpdate),t.on("eachNodeAttributesUpdated",this.activeListeners.graphUpdate),t.on("edgeAdded",this.activeListeners.graphUpdate),t.on("edgeDropped",this.activeListeners.dropEdgeGraphUpdate),t.on("edgeAttributesUpdated",this.activeListeners.softGraphUpdate),t.on("eachEdgeAttributesUpdated",this.activeListeners.graphUpdate),t.on("edgesCleared",this.activeListeners.clearEdgesGraphUpdate),t.on("cleared",this.activeListeners.clearGraphUpdate),this},t.prototype.unbindGraphHandlers=function(){var e=this.graph;e.removeListener("nodeAdded",this.activeListeners.graphUpdate),e.removeListener("nodeDropped",this.activeListeners.dropNodeGraphUpdate),e.removeListener("nodeAttributesUpdated",this.activeListeners.softGraphUpdate),e.removeListener("eachNodeAttributesUpdated",this.activeListeners.graphUpdate),e.removeListener("edgeAdded",this.activeListeners.graphUpdate),e.removeListener("edgeDropped",this.activeListeners.dropEdgeGraphUpdate),e.removeListener("edgeAttributesUpdated",this.activeListeners.softGraphUpdate),e.removeListener("eachEdgeAttributesUpdated",this.activeListeners.graphUpdate),e.removeListener("edgesCleared",this.activeListeners.clearEdgesGraphUpdate),e.removeListener("cleared",this.activeListeners.clearGraphUpdate)},t.prototype.checkEdgeHoverEvents=function(e){var t=this.hoveredNode?null:this.getEdgeAtPoint(e.event.x,e.event.y);return t!==this.hoveredEdge&&(this.hoveredEdge&&this.emit("leaveEdge",o(o({},e),{edge:this.hoveredEdge})),t&&this.emit("enterEdge",o(o({},e),{edge:t})),this.hoveredEdge=t),this},t.prototype.getEdgeAtPoint=function(e,t){var r,n,i=this,o=this.edgeDataCache,s=this.nodeDataCache;if(!(0,m.isPixelColored)(this.webGLContexts.edges,e*this.pixelRatio,t*this.pixelRatio))return null;var c=this.viewportToGraph({x:e,y:t}),u=c.x,h=c.y,d=0;if(this.graph.someEdge((function(e,t,r,n,a,c){var u=a.x,h=a.y,l=c.x,p=c.y;if(o[e].hidden||s[r].hidden||s[n].hidden)return!1;if(u!==l||h!==p){var f=Math.sqrt(Math.pow(l-u,2)+Math.pow(p-h,2)),g=i.graphToViewport({x:u,y:h}),y=g.x,v=g.y,m=i.graphToViewport({x:l,y:p}),b=m.x,w=m.y,_=Math.sqrt(Math.pow(b-y,2)+Math.pow(w-v,2));return d=f/_,!0}})),!d)return null;var l=this.graph.filterEdges((function(e,t,r,n,a,c){return!(o[e].hidden||s[r].hidden||s[n].hidden)&&(!!(0,m.doEdgeCollideWithPoint)(u,h,a.x,a.y,c.x,c.y,o[e].size*d/i.cameraSizeRatio)||void 0)}));if(0===l.length)return null;var p=l[l.length-1],f=-1/0;try{for(var g=a(l),y=g.next();!y.done;y=g.next()){var v=y.value,b=this.graph.getEdgeAttribute(v,"zIndex");b>=f&&(p=v,f=b)}}catch(e){r={error:e}}finally{try{y&&!y.done&&(n=g.return)&&n.call(g)}finally{if(r)throw r.error}}return p},t.prototype.process=function(e){var t=this;void 0===e&&(e=!1);var r=this.graph,n=this.settings,i=this.getDimensions(),o=[1/0,-1/0],a=[1/0,-1/0];this.quadtree.clear(),this.labelGrid.resizeAndClear(i,n.labelGridCellSize),this.highlightedNodes=new Set,this.nodeExtent=(0,p.graphExtent)(r),this.nodesWithForcedLabels=[],this.edgesWithForcedLabels=[];var s=new u.default,c=(0,p.matrixFromCamera)(s.getState(),this.getDimensions(),this.getGraphDimensions(),this.getSetting("stagePadding")||0);this.normalizationFunction=(0,p.createNormalizationFunction)(this.customBBox||this.nodeExtent);for(var h={},d=r.nodes(),l=0,f=d.length;l<f;l++){var g=d[l],y=Object.assign({},r.getNodeAttributes(g));n.nodeReducer&&(y=n.nodeReducer(g,y)),h[(m=b(this.settings,g,y)).type]=(h[m.type]||0)+1,this.nodeDataCache[g]=m,this.normalizationFunction.applyTo(m),m.forceLabel&&this.nodesWithForcedLabels.push(g),this.settings.zIndex&&(m.zIndex<o[0]&&(o[0]=m.zIndex),m.zIndex>o[1]&&(o[1]=m.zIndex))}for(var v in this.nodePrograms){if(!this.nodePrograms.hasOwnProperty(v))throw new Error('Sigma: could not find a suitable program for node type "'.concat(v,'"!'));e||this.nodePrograms[v].allocate(h[v]||0),h[v]=0}for(this.settings.zIndex&&o[0]!==o[1]&&(d=(0,p.zIndexOrdering)(o,(function(e){return t.nodeDataCache[e].zIndex}),d)),l=0,f=d.length;l<f;l++){g=d[l];var m=this.nodeDataCache[g];this.quadtree.add(g,m.x,1-m.y,m.size/this.width),"string"!=typeof m.label||m.hidden||this.labelGrid.add(g,m.size,this.framedGraphToViewport(m,{matrix:c}));var _=this.nodePrograms[m.type];if(!_)throw new Error('Sigma: could not find a suitable program for node type "'.concat(m.type,'"!'));_.process(m,m.hidden,h[m.type]++),m.highlighted&&!m.hidden&&this.highlightedNodes.add(g)}this.labelGrid.organize();var x={},E=r.edges();for(l=0,f=E.length;l<f;l++){var L=E[l];y=Object.assign({},r.getEdgeAttributes(L)),n.edgeReducer&&(y=n.edgeReducer(L,y)),x[(m=w(this.settings,0,y)).type]=(x[m.type]||0)+1,this.edgeDataCache[L]=m,m.forceLabel&&!m.hidden&&this.edgesWithForcedLabels.push(L),this.settings.zIndex&&(m.zIndex<a[0]&&(a[0]=m.zIndex),m.zIndex>a[1]&&(a[1]=m.zIndex))}for(var v in this.edgePrograms){if(!this.edgePrograms.hasOwnProperty(v))throw new Error('Sigma: could not find a suitable program for edge type "'.concat(v,'"!'));e||this.edgePrograms[v].allocate(x[v]||0),x[v]=0}for(this.settings.zIndex&&a[0]!==a[1]&&(E=(0,p.zIndexOrdering)(a,(function(e){return t.edgeDataCache[e].zIndex}),E)),l=0,f=E.length;l<f;l++){L=E[l],m=this.edgeDataCache[L];var A=r.extremities(L),S=this.nodeDataCache[A[0]],C=this.nodeDataCache[A[1]],k=m.hidden||S.hidden||C.hidden;this.edgePrograms[m.type].process(S,C,m,k,x[m.type]++)}for(var v in this.edgePrograms){var G=this.edgePrograms[v];e||"function"!=typeof G.computeIndices||G.computeIndices()}return this},t.prototype.handleSettingsUpdate=function(){return this.camera.minRatio=this.settings.minCameraRatio,this.camera.maxRatio=this.settings.maxCameraRatio,this.camera.setState(this.camera.validateState(this.camera.getState())),this},t.prototype._refresh=function(){return this.needToProcess?this.process():this.needToSoftProcess&&this.process(!0),this.needToProcess=!1,this.needToSoftProcess=!1,this.render(),this},t.prototype._scheduleRefresh=function(){var e=this;return this.renderFrame||(this.renderFrame=(0,p.requestFrame)((function(){e._refresh(),e.renderFrame=null}))),this},t.prototype.renderLabels=function(){if(!this.settings.renderLabels)return this;var e=this.camera.getState(),t=this.labelGrid.getLabelsToDisplay(e.ratio,this.settings.labelDensity);(0,c.default)(t,this.nodesWithForcedLabels),this.displayedLabels=new Set;for(var r=this.canvasContexts.labels,n=0,i=t.length;n<i;n++){var a=t[n],s=this.nodeDataCache[a];if(!this.displayedLabels.has(a)&&!s.hidden){var u=this.framedGraphToViewport(s),h=u.x,d=u.y,l=this.scaleSize(s.size);!s.forceLabel&&l<this.settings.labelRenderedSizeThreshold||h<-150||h>this.width+150||d<-50||d>this.height+50||(this.displayedLabels.add(a),this.settings.labelRenderer(r,o(o({key:a},s),{size:l,x:h,y:d}),this.settings))}}return this},t.prototype.renderEdgeLabels=function(){if(!this.settings.renderEdgeLabels)return this;var e=this.canvasContexts.edgeLabels;e.clearRect(0,0,this.width,this.height);for(var t=(0,f.edgeLabelsToDisplayFromNodes)({graph:this.graph,hoveredNode:this.hoveredNode,displayedNodeLabels:this.displayedLabels,highlightedNodes:this.highlightedNodes}).concat(this.edgesWithForcedLabels),r=new Set,n=0,i=t.length;n<i;n++){var a=t[n],s=this.graph.extremities(a),c=this.nodeDataCache[s[0]],u=this.nodeDataCache[s[1]],h=this.edgeDataCache[a];r.has(a)||h.hidden||c.hidden||u.hidden||(this.settings.edgeLabelRenderer(e,o(o({key:a},h),{size:this.scaleSize(h.size)}),o(o(o({key:s[0]},c),this.framedGraphToViewport(c)),{size:this.scaleSize(c.size)}),o(o(o({key:s[1]},u),this.framedGraphToViewport(u)),{size:this.scaleSize(u.size)}),this.settings),r.add(a))}return this},t.prototype.renderHighlightedNodes=function(){var e=this,t=this.canvasContexts.hovers;t.clearRect(0,0,this.width,this.height);var r=[];this.hoveredNode&&!this.nodeDataCache[this.hoveredNode].hidden&&r.push(this.hoveredNode),this.highlightedNodes.forEach((function(t){t!==e.hoveredNode&&r.push(t)})),r.forEach((function(r){return function(r){var n=e.nodeDataCache[r],i=e.framedGraphToViewport(n),a=i.x,s=i.y,c=e.scaleSize(n.size);e.settings.hoverRenderer(t,o(o({key:r},n),{size:c,x:a,y:s}),e.settings)}(r)}));var n={};for(var i in r.forEach((function(t){var r=e.nodeDataCache[t].type;n[r]=(n[r]||0)+1})),this.nodeHoverPrograms)this.nodeHoverPrograms[i].allocate(n[i]||0),n[i]=0;for(var i in r.forEach((function(t){var r=e.nodeDataCache[t];e.nodeHoverPrograms[r.type].process(r,r.hidden,n[r.type]++)})),this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT),this.nodeHoverPrograms){var a=this.nodeHoverPrograms[i];a.bind(),a.bufferData(),a.render({matrix:this.matrix,width:this.width,height:this.height,ratio:this.camera.ratio,correctionRatio:this.correctionRatio/this.camera.ratio,scalingRatio:this.pixelRatio})}},t.prototype.scheduleHighlightedNodesRender=function(){var e=this;this.renderHighlightedNodesFrame||this.renderFrame||(this.renderHighlightedNodesFrame=(0,p.requestFrame)((function(){e.renderHighlightedNodesFrame=null,e.renderHighlightedNodes(),e.renderEdgeLabels()})))},t.prototype.render=function(){var e=this;this.emit("beforeRender");var t=function(){return e.emit("afterRender"),e};if(this.renderFrame&&((0,p.cancelFrame)(this.renderFrame),this.renderFrame=null,this.needToProcess=!1,this.needToSoftProcess=!1),this.resize(),this.clear(),this.updateCachedValues(),!this.graph.order)return t();var r=this.mouseCaptor,n=this.camera.isAnimated()||r.isMoving||r.draggedEvents||r.currentWheelDirection,i=this.camera.getState(),o=this.getDimensions(),a=this.getGraphDimensions(),s=this.getSetting("stagePadding")||0;for(var c in this.matrix=(0,p.matrixFromCamera)(i,o,a,s),this.invMatrix=(0,p.matrixFromCamera)(i,o,a,s,!0),this.correctionRatio=(0,p.getMatrixImpact)(this.matrix,i,o),this.nodePrograms)(u=this.nodePrograms[c]).bind(),u.bufferData(),u.render({matrix:this.matrix,width:this.width,height:this.height,ratio:i.ratio,correctionRatio:this.correctionRatio/i.ratio,scalingRatio:this.pixelRatio});if(!this.settings.hideEdgesOnMove||!n)for(var c in this.edgePrograms){var u;(u=this.edgePrograms[c]).bind(),u.bufferData(),u.render({matrix:this.matrix,width:this.width,height:this.height,ratio:i.ratio,correctionRatio:this.correctionRatio/i.ratio,scalingRatio:this.pixelRatio})}return this.settings.hideLabelsOnMove&&n||(this.renderLabels(),this.renderEdgeLabels(),this.renderHighlightedNodes()),t()},t.prototype.updateCachedValues=function(){var e=this.camera.getState().ratio;this.cameraSizeRatio=Math.sqrt(e)},t.prototype.getCamera=function(){return this.camera},t.prototype.getContainer=function(){return this.container},t.prototype.getGraph=function(){return this.graph},t.prototype.setGraph=function(e){e!==this.graph&&(this.unbindGraphHandlers(),this.nodeDataCache={},this.edgeDataCache={},this.displayedLabels.clear(),this.highlightedNodes.clear(),this.hoveredNode=null,this.hoveredEdge=null,this.nodesWithForcedLabels.length=0,this.edgesWithForcedLabels.length=0,null!==this.checkEdgesEventsFrame&&((0,p.cancelFrame)(this.checkEdgesEventsFrame),this.checkEdgesEventsFrame=null),this.graph=e,this.bindGraphHandlers(),this.process(),this.render())},t.prototype.getMouseCaptor=function(){return this.mouseCaptor},t.prototype.getTouchCaptor=function(){return this.touchCaptor},t.prototype.getDimensions=function(){return{width:this.width,height:this.height}},t.prototype.getGraphDimensions=function(){var e=this.customBBox||this.nodeExtent;return{width:e.x[1]-e.x[0]||1,height:e.y[1]-e.y[0]||1}},t.prototype.getNodeDisplayData=function(e){var t=this.nodeDataCache[e];return t?Object.assign({},t):void 0},t.prototype.getEdgeDisplayData=function(e){var t=this.edgeDataCache[e];return t?Object.assign({},t):void 0},t.prototype.getSettings=function(){return o({},this.settings)},t.prototype.getSetting=function(e){return this.settings[e]},t.prototype.setSetting=function(e,t){return this.settings[e]=t,(0,g.validateSettings)(this.settings),this.handleSettingsUpdate(),this.needToProcess=!0,this._scheduleRefresh(),this},t.prototype.updateSetting=function(e,t){return this.settings[e]=t(this.settings[e]),(0,g.validateSettings)(this.settings),this.handleSettingsUpdate(),this.needToProcess=!0,this._scheduleRefresh(),this},t.prototype.resize=function(){var e=this.width,t=this.height;if(this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,this.pixelRatio=(0,p.getPixelRatio)(),0===this.width){if(!this.settings.allowInvalidContainer)throw new Error("Sigma: Container has no width. You can set the allowInvalidContainer setting to true to stop seeing this error.");this.width=1}if(0===this.height){if(!this.settings.allowInvalidContainer)throw new Error("Sigma: Container has no height. You can set the allowInvalidContainer setting to true to stop seeing this error.");this.height=1}if(e===this.width&&t===this.height)return this;for(var r in this.emit("resize"),this.elements){var n=this.elements[r];n.style.width=this.width+"px",n.style.height=this.height+"px"}for(var r in this.canvasContexts)this.elements[r].setAttribute("width",this.width*this.pixelRatio+"px"),this.elements[r].setAttribute("height",this.height*this.pixelRatio+"px"),1!==this.pixelRatio&&this.canvasContexts[r].scale(this.pixelRatio,this.pixelRatio);for(var r in this.webGLContexts)this.elements[r].setAttribute("width",this.width*this.pixelRatio+"px"),this.elements[r].setAttribute("height",this.height*this.pixelRatio+"px"),this.webGLContexts[r].viewport(0,0,this.width*this.pixelRatio,this.height*this.pixelRatio);return this},t.prototype.clear=function(){return this.webGLContexts.nodes.clear(this.webGLContexts.nodes.COLOR_BUFFER_BIT),this.webGLContexts.edges.clear(this.webGLContexts.edges.COLOR_BUFFER_BIT),this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT),this.canvasContexts.labels.clearRect(0,0,this.width,this.height),this.canvasContexts.hovers.clearRect(0,0,this.width,this.height),this.canvasContexts.edgeLabels.clearRect(0,0,this.width,this.height),this},t.prototype.refresh=function(){return this.needToProcess=!0,this._refresh(),this},t.prototype.scheduleRefresh=function(){return this.needToProcess=!0,this._scheduleRefresh(),this},t.prototype.getViewportZoomedState=function(e,t){var r=this.camera.getState(),n=r.ratio,i=r.angle,o=r.x,a=r.y,s=t/n,c={x:this.width/2,y:this.height/2},u=this.viewportToFramedGraph(e),h=this.viewportToFramedGraph(c);return{angle:i,x:(u.x-h.x)*(1-s)+o,y:(u.y-h.y)*(1-s)+a,ratio:t}},t.prototype.viewRectangle=function(){var e=0*this.width/8,t=0*this.height/8,r=this.viewportToFramedGraph({x:0-e,y:0-t}),n=this.viewportToFramedGraph({x:this.width+e,y:0-t}),i=this.viewportToFramedGraph({x:0,y:this.height+t});return{x1:r.x,y1:r.y,x2:n.x,y2:n.y,height:n.y-i.y}},t.prototype.framedGraphToViewport=function(e,t){void 0===t&&(t={});var r=!!t.cameraState||!!t.viewportDimensions||!!t.graphDimensions,n=t.matrix?t.matrix:r?(0,p.matrixFromCamera)(t.cameraState||this.camera.getState(),t.viewportDimensions||this.getDimensions(),t.graphDimensions||this.getGraphDimensions(),t.padding||this.getSetting("stagePadding")||0):this.matrix,i=(0,v.multiplyVec2)(n,e);return{x:(1+i.x)*this.width/2,y:(1-i.y)*this.height/2}},t.prototype.viewportToFramedGraph=function(e,t){void 0===t&&(t={});var r=!!t.cameraState||!!t.viewportDimensions||!t.graphDimensions,n=t.matrix?t.matrix:r?(0,p.matrixFromCamera)(t.cameraState||this.camera.getState(),t.viewportDimensions||this.getDimensions(),t.graphDimensions||this.getGraphDimensions(),t.padding||this.getSetting("stagePadding")||0,!0):this.invMatrix,i=(0,v.multiplyVec2)(n,{x:e.x/this.width*2-1,y:1-e.y/this.height*2});return isNaN(i.x)&&(i.x=0),isNaN(i.y)&&(i.y=0),i},t.prototype.viewportToGraph=function(e,t){return void 0===t&&(t={}),this.normalizationFunction.inverse(this.viewportToFramedGraph(e,t))},t.prototype.graphToViewport=function(e,t){return void 0===t&&(t={}),this.framedGraphToViewport(this.normalizationFunction(e),t)},t.prototype.getBBox=function(){return(0,p.graphExtent)(this.graph)},t.prototype.getCustomBBox=function(){return this.customBBox},t.prototype.setCustomBBox=function(e){return this.customBBox=e,this._scheduleRefresh(),this},t.prototype.kill=function(){this.emit("kill"),this.removeAllListeners(),this.camera.removeListener("updated",this.activeListeners.camera),window.removeEventListener("resize",this.activeListeners.handleResize),this.mouseCaptor.kill(),this.touchCaptor.kill(),this.unbindGraphHandlers(),this.quadtree=new d.default,this.nodeDataCache={},this.edgeDataCache={},this.nodesWithForcedLabels=[],this.edgesWithForcedLabels=[],this.highlightedNodes.clear(),this.renderFrame&&((0,p.cancelFrame)(this.renderFrame),this.renderFrame=null),this.renderHighlightedNodesFrame&&((0,p.cancelFrame)(this.renderHighlightedNodesFrame),this.renderHighlightedNodesFrame=null);for(var e=this.container;e.firstChild;)e.removeChild(e.firstChild)},t.prototype.scaleSize=function(e){return e/this.cameraSizeRatio},t.prototype.getCanvases=function(){return o({},this.elements)},t}(l.TypedEventEmitter);t.default=_},291:function(e,t,r){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.TypedEventEmitter=void 0;var o=function(e){function t(){var t=e.call(this)||this;return t.rawEmitter=t,t}return i(t,e),t}(r(187).EventEmitter);t.TypedEventEmitter=o},227:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.animateNodes=t.ANIMATE_DEFAULTS=void 0;var i=r(524),o=n(r(941));t.ANIMATE_DEFAULTS={easing:"quadraticInOut",duration:150},t.animateNodes=function(e,r,n,a){var s=Object.assign({},t.ANIMATE_DEFAULTS,n),c="function"==typeof s.easing?s.easing:o.default[s.easing],u=Date.now(),h={};for(var d in r){var l=r[d];for(var p in h[d]={},l)h[d][p]=e.getNodeAttribute(d,p)}var f=null,g=function(){f=null;var t=(Date.now()-u)/s.duration;if(t>=1){for(var n in r){var o=r[n];for(var d in o)e.setNodeAttribute(n,d,o[d])}"function"==typeof a&&a()}else{for(var n in t=c(t),r){o=r[n];var l=h[n];for(var d in o)e.setNodeAttribute(n,d,o[d]*t+l[d]*(1-t))}f=(0,i.requestFrame)(g)}};return g(),function(){f&&(0,i.cancelFrame)(f)}}},109:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HTML_COLORS=void 0,t.HTML_COLORS={black:"#000000",silver:"#C0C0C0",gray:"#808080",grey:"#808080",white:"#FFFFFF",maroon:"#800000",red:"#FF0000",purple:"#800080",fuchsia:"#FF00FF",green:"#008000",lime:"#00FF00",olive:"#808000",yellow:"#FFFF00",navy:"#000080",blue:"#0000FF",teal:"#008080",aqua:"#00FFFF",darkblue:"#00008B",mediumblue:"#0000CD",darkgreen:"#006400",darkcyan:"#008B8B",deepskyblue:"#00BFFF",darkturquoise:"#00CED1",mediumspringgreen:"#00FA9A",springgreen:"#00FF7F",cyan:"#00FFFF",midnightblue:"#191970",dodgerblue:"#1E90FF",lightseagreen:"#20B2AA",forestgreen:"#228B22",seagreen:"#2E8B57",darkslategray:"#2F4F4F",darkslategrey:"#2F4F4F",limegreen:"#32CD32",mediumseagreen:"#3CB371",turquoise:"#40E0D0",royalblue:"#4169E1",steelblue:"#4682B4",darkslateblue:"#483D8B",mediumturquoise:"#48D1CC",indigo:"#4B0082",darkolivegreen:"#556B2F",cadetblue:"#5F9EA0",cornflowerblue:"#6495ED",rebeccapurple:"#663399",mediumaquamarine:"#66CDAA",dimgray:"#696969",dimgrey:"#696969",slateblue:"#6A5ACD",olivedrab:"#6B8E23",slategray:"#708090",slategrey:"#708090",lightslategray:"#778899",lightslategrey:"#778899",mediumslateblue:"#7B68EE",lawngreen:"#7CFC00",chartreuse:"#7FFF00",aquamarine:"#7FFFD4",skyblue:"#87CEEB",lightskyblue:"#87CEFA",blueviolet:"#8A2BE2",darkred:"#8B0000",darkmagenta:"#8B008B",saddlebrown:"#8B4513",darkseagreen:"#8FBC8F",lightgreen:"#90EE90",mediumpurple:"#9370DB",darkviolet:"#9400D3",palegreen:"#98FB98",darkorchid:"#9932CC",yellowgreen:"#9ACD32",sienna:"#A0522D",brown:"#A52A2A",darkgray:"#A9A9A9",darkgrey:"#A9A9A9",lightblue:"#ADD8E6",greenyellow:"#ADFF2F",paleturquoise:"#AFEEEE",lightsteelblue:"#B0C4DE",powderblue:"#B0E0E6",firebrick:"#B22222",darkgoldenrod:"#B8860B",mediumorchid:"#BA55D3",rosybrown:"#BC8F8F",darkkhaki:"#BDB76B",mediumvioletred:"#C71585",indianred:"#CD5C5C",peru:"#CD853F",chocolate:"#D2691E",tan:"#D2B48C",lightgray:"#D3D3D3",lightgrey:"#D3D3D3",thistle:"#D8BFD8",orchid:"#DA70D6",goldenrod:"#DAA520",palevioletred:"#DB7093",crimson:"#DC143C",gainsboro:"#DCDCDC",plum:"#DDA0DD",burlywood:"#DEB887",lightcyan:"#E0FFFF",lavender:"#E6E6FA",darksalmon:"#E9967A",violet:"#EE82EE",palegoldenrod:"#EEE8AA",lightcoral:"#F08080",khaki:"#F0E68C",aliceblue:"#F0F8FF",honeydew:"#F0FFF0",azure:"#F0FFFF",sandybrown:"#F4A460",wheat:"#F5DEB3",beige:"#F5F5DC",whitesmoke:"#F5F5F5",mintcream:"#F5FFFA",ghostwhite:"#F8F8FF",salmon:"#FA8072",antiquewhite:"#FAEBD7",linen:"#FAF0E6",lightgoldenrodyellow:"#FAFAD2",oldlace:"#FDF5E6",magenta:"#FF00FF",deeppink:"#FF1493",orangered:"#FF4500",tomato:"#FF6347",hotpink:"#FF69B4",coral:"#FF7F50",darkorange:"#FF8C00",lightsalmon:"#FFA07A",orange:"#FFA500",lightpink:"#FFB6C1",pink:"#FFC0CB",gold:"#FFD700",peachpuff:"#FFDAB9",navajowhite:"#FFDEAD",moccasin:"#FFE4B5",bisque:"#FFE4C4",mistyrose:"#FFE4E1",blanchedalmond:"#FFEBCD",papayawhip:"#FFEFD5",lavenderblush:"#FFF0F5",seashell:"#FFF5EE",cornsilk:"#FFF8DC",lemonchiffon:"#FFFACD",floralwhite:"#FFFAF0",snow:"#FFFAFA",lightyellow:"#FFFFE0",ivory:"#FFFFF0"}},941:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cubicInOut=t.cubicOut=t.cubicIn=t.quadraticInOut=t.quadraticOut=t.quadraticIn=t.linear=void 0,t.linear=function(e){return e},t.quadraticIn=function(e){return e*e},t.quadraticOut=function(e){return e*(2-e)},t.quadraticInOut=function(e){return(e*=2)<1?.5*e*e:-.5*(--e*(e-2)-1)},t.cubicIn=function(e){return e*e*e},t.cubicOut=function(e){return--e*e*e+1},t.cubicInOut=function(e){return(e*=2)<1?.5*e*e*e:.5*((e-=2)*e*e+2)};var r={linear:t.linear,quadraticIn:t.quadraticIn,quadraticOut:t.quadraticOut,quadraticInOut:t.quadraticInOut,cubicIn:t.cubicIn,cubicOut:t.cubicOut,cubicInOut:t.cubicInOut};t.default=r},822:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.doEdgeCollideWithPoint=t.isPixelColored=void 0,t.isPixelColored=function(e,t,r){var n=new Uint8Array(4);return e.readPixels(t,e.drawingBufferHeight-r,1,1,e.RGBA,e.UNSIGNED_BYTE,n),n[3]>0},t.doEdgeCollideWithPoint=function(e,t,r,n,i,o,a){return!(e<r-a&&e<i-a||t<n-a&&t<o-a||e>r+a&&e>i+a||t>n+a&&t>o+a||!(Math.abs((i-r)*(n-t)-(r-e)*(o-n))/Math.sqrt(Math.pow(i-r,2)+Math.pow(o-n,2))<a/2))}},524:function(e,t,r){"use strict";var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.validateGraph=t.canUse32BitsIndices=t.extractPixel=t.getMatrixImpact=t.matrixFromCamera=t.getCorrectionRatio=t.floatColor=t.floatArrayColor=t.parseColor=t.zIndexOrdering=t.createNormalizationFunction=t.graphExtent=t.getPixelRatio=t.createElement=t.cancelFrame=t.requestFrame=t.assignDeep=t.assign=t.isPlainObject=void 0;var o=i(r(186)),a=r(132),s=r(109);function c(e){return"object"==typeof e&&null!==e&&e.constructor===Object}t.isPlainObject=c,t.assign=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];e=e||{};for(var n=0,i=t.length;n<i;n++){var o=t[n];o&&Object.assign(e,o)}return e},t.assignDeep=function e(t){for(var r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];t=t||{};for(var i=0,o=r.length;i<o;i++){var a=r[i];if(a)for(var s in a)c(a[s])?t[s]=e(t[s],a[s]):t[s]=a[s]}return t},t.requestFrame="undefined"!=typeof requestAnimationFrame?function(e){return requestAnimationFrame(e)}:function(e){return setTimeout(e,0)},t.cancelFrame="undefined"!=typeof cancelAnimationFrame?function(e){return cancelAnimationFrame(e)}:function(e){return clearTimeout(e)},t.createElement=function(e,t,r){var n=document.createElement(e);if(t)for(var i in t)n.style[i]=t[i];if(r)for(var i in r)n.setAttribute(i,r[i]);return n},t.getPixelRatio=function(){return void 0!==window.devicePixelRatio?window.devicePixelRatio:1},t.graphExtent=function(e){if(!e.order)return{x:[0,1],y:[0,1]};var t=1/0,r=-1/0,n=1/0,i=-1/0;return e.forEachNode((function(e,o){var a=o.x,s=o.y;a<t&&(t=a),a>r&&(r=a),s<n&&(n=s),s>i&&(i=s)})),{x:[t,r],y:[n,i]}},t.createNormalizationFunction=function(e){var t=n(e.x,2),r=t[0],i=t[1],o=n(e.y,2),a=o[0],s=o[1],c=Math.max(i-r,s-a),u=(i+r)/2,h=(s+a)/2;(0===c||Math.abs(c)===1/0||isNaN(c))&&(c=1),isNaN(u)&&(u=0),isNaN(h)&&(h=0);var d=function(e){return{x:.5+(e.x-u)/c,y:.5+(e.y-h)/c}};return d.applyTo=function(e){e.x=.5+(e.x-u)/c,e.y=.5+(e.y-h)/c},d.inverse=function(e){return{x:u+c*(e.x-.5),y:h+c*(e.y-.5)}},d.ratio=c,d},t.zIndexOrdering=function(e,t,r){return r.sort((function(e,r){var n=t(e)||0,i=t(r)||0;return n<i?-1:n>i?1:0}))};var u=new Int8Array(4),h=new Int32Array(u.buffer,0,1),d=new Float32Array(u.buffer,0,1),l=/^\s*rgba?\s*\(/,p=/^\s*rgba?\s*\(\s*([0-9]*)\s*,\s*([0-9]*)\s*,\s*([0-9]*)(?:\s*,\s*(.*)?)?\)\s*$/;function f(e){var t=0,r=0,n=0,i=1;if("#"===e[0])4===e.length?(t=parseInt(e.charAt(1)+e.charAt(1),16),r=parseInt(e.charAt(2)+e.charAt(2),16),n=parseInt(e.charAt(3)+e.charAt(3),16)):(t=parseInt(e.charAt(1)+e.charAt(2),16),r=parseInt(e.charAt(3)+e.charAt(4),16),n=parseInt(e.charAt(5)+e.charAt(6),16)),9===e.length&&(i=parseInt(e.charAt(7)+e.charAt(8),16)/255);else if(l.test(e)){var o=e.match(p);o&&(t=+o[1],r=+o[2],n=+o[3],o[4]&&(i=+o[4]))}return{r:t,g:r,b:n,a:i}}t.parseColor=f;var g={};for(var y in s.HTML_COLORS)g[y]=v(s.HTML_COLORS[y]),g[s.HTML_COLORS[y]]=g[y];function v(e){if(void 0!==g[e])return g[e];var t=f(e),r=t.r,n=t.g,i=t.b,o=t.a;o=255*o|0,h[0]=4278190079&(o<<24|i<<16|n<<8|r);var a=d[0];return g[e]=a,a}function m(e,t){var r=e.height/e.width,n=t.height/t.width;return r<1&&n>1||r>1&&n<1?1:Math.min(Math.max(n,1/n),Math.max(1/r,r))}t.floatArrayColor=function(e){var t=f(e=s.HTML_COLORS[e]||e),r=t.r,n=t.g,i=t.b,o=t.a;return new Float32Array([r/255,n/255,i/255,o])},t.floatColor=v,t.getCorrectionRatio=m,t.matrixFromCamera=function(e,t,r,n,i){var o=e.angle,s=e.ratio,c=e.x,u=e.y,h=t.width,d=t.height,l=(0,a.identity)(),p=Math.min(h,d)-2*n,f=m(t,r);return i?((0,a.multiply)(l,(0,a.translate)((0,a.identity)(),c,u)),(0,a.multiply)(l,(0,a.scale)((0,a.identity)(),s)),(0,a.multiply)(l,(0,a.rotate)((0,a.identity)(),o)),(0,a.multiply)(l,(0,a.scale)((0,a.identity)(),h/p/2/f,d/p/2/f))):((0,a.multiply)(l,(0,a.scale)((0,a.identity)(),p/h*2*f,p/d*2*f)),(0,a.multiply)(l,(0,a.rotate)((0,a.identity)(),-o)),(0,a.multiply)(l,(0,a.scale)((0,a.identity)(),1/s)),(0,a.multiply)(l,(0,a.translate)((0,a.identity)(),-c,-u))),l},t.getMatrixImpact=function(e,t,r){var n=(0,a.multiplyVec2)(e,{x:Math.cos(t.angle),y:Math.sin(t.angle)},0),i=n.x,o=n.y;return 1/Math.sqrt(Math.pow(i,2)+Math.pow(o,2))/r.width},t.extractPixel=function(e,t,r,n){var i=n||new Uint8Array(4);return e.readPixels(t,r,1,1,e.RGBA,e.UNSIGNED_BYTE,i),i},t.canUse32BitsIndices=function(e){return"undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext||!!e.getExtension("OES_element_index_uint")},t.validateGraph=function(e){if(!(0,o.default)(e))throw new Error("Sigma: invalid graph instance.");e.forEachNode((function(e,t){if(!Number.isFinite(t.x)||!Number.isFinite(t.y))throw new Error("Sigma: Coordinates of node ".concat(e," are invalid. A node must have a numeric 'x' and 'y' attribute."))}))}},132:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.multiplyVec2=t.multiply=t.translate=t.rotate=t.scale=t.identity=void 0,t.identity=function(){return Float32Array.of(1,0,0,0,1,0,0,0,1)},t.scale=function(e,t,r){return e[0]=t,e[4]="number"==typeof r?r:t,e},t.rotate=function(e,t){var r=Math.sin(t),n=Math.cos(t);return e[0]=n,e[1]=r,e[3]=-r,e[4]=n,e},t.translate=function(e,t,r){return e[6]=t,e[7]=r,e},t.multiply=function(e,t){var r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],s=e[5],c=e[6],u=e[7],h=e[8],d=t[0],l=t[1],p=t[2],f=t[3],g=t[4],y=t[5],v=t[6],m=t[7],b=t[8];return e[0]=d*r+l*o+p*c,e[1]=d*n+l*a+p*u,e[2]=d*i+l*s+p*h,e[3]=f*r+g*o+y*c,e[4]=f*n+g*a+y*u,e[5]=f*i+g*s+y*h,e[6]=v*r+m*o+b*c,e[7]=v*n+m*a+b*u,e[8]=v*i+m*s+b*h,e},t.multiplyVec2=function(e,t,r){void 0===r&&(r=1);var n=e[0],i=e[1],o=e[3],a=e[4],s=e[6],c=e[7],u=t.x,h=t.y;return{x:u*n+h*o+s*r,y:u*i+h*a+c*r}}}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};return(()=>{"use strict";r.r(n),r.d(n,{SigmaGraphCreator:()=>a});var e=r(698),t=r.n(e),i=r(26),o=r.n(i);class a{constructor(e){this.rootelement=e,this.sigmaContainer=e.querySelector("#sigma-container"),this.url=window.origin+"/api/ordering_graph/",this.serverRequest=(({url:e})=>fetch(e).then((e=>e.json())))({url:this.url})}createSigmaGraph(){this.serverRequest.then((e=>{const r=new(t());r.import(e),this.setGraphAttributes(r),this.renderer=new(o())(r,this.sigmaContainer,{allowInvalidContainer:!0})}))}setGraphAttributes(e){var t,r=0;e.forEachNode(((n,i)=>{const o=e.getNodeAttribute(n,"train_id"),a="Train:"+o+" Route:"+e.getNodeAttribute(n,"route_id");t===o?r++:(t=o,r=0),e.setNodeAttribute(n,"x",r/2).setNodeAttribute(n,"y",o/2).setNodeAttribute(n,"label",a).setNodeAttribute(n,"color","#0000FF")})),e.forEachEdge((t=>{e.setEdgeAttribute(t,"type","arrow")}))}resizeSigmaGraph(){void 0!==this.renderer?this.renderer.refresh():console.log("graph doesn't exist!")}destroySigmaGraph(){void 0!==this.renderer&&(this.renderer.clear(),this.renderer.kill(),this.rootelement.removeChild(this.sigmaContainer))}}})(),n})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,